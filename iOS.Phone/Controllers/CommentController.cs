// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using CoreGraphics;
using Shared.Common;
using System.Threading.Tasks;
using GalaSoft.MvvmLight.Helpers;
using System.ComponentModel;
using System.Collections.Generic;

namespace iOS.Phone
{
	public partial class CommentController : UIViewController
	{
		#region Variables

		private PSObservableTableController _tableController;
        private List<NSObject> _notificationObservers = new List<NSObject>();

		#endregion

		#region Properties

		public CommentViewModel ViewModel { get; set; }

		#endregion

		#region Lifecycle

		public CommentController (IntPtr handle) : base (handle) { }

		public override async void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			await ViewModel.DidLoad ();
			InitUI ();
			InitBindings ();
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);

            _notificationObservers.Add(NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.DidShowNotification, KeyboardDidShow));
            _notificationObservers.Add(NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, KeyboardWillShow));
            _notificationObservers.Add(NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.DidHideNotification, KeyboardDidHide));
            _notificationObservers.Add(NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, KeyboardWillHide));

			CommentTextView.Changed += OnCommentTextViewChanged;
			CommentTextView.Started += OnCommentTextViewStarted;
			CommentTextView.Ended += OnCommentTextViewEnded;
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

            NSNotificationCenter.DefaultCenter.RemoveObservers(_notificationObservers);

			CommentTextView.Changed -= OnCommentTextViewChanged;
			CommentTextView.Started -= OnCommentTextViewStarted;
			CommentTextView.Ended -= OnCommentTextViewEnded;
		}

		private void InitUI ()
		{
			// Add tap to dismiss keyboard
			var tap = new UITapGestureRecognizer (() => CommentTextView.ResignFirstResponder ());

			tap.NumberOfTapsRequired = 1;

			View.AddGestureRecognizer (tap);

			// Set UI elements
			Title = ViewModel.Title;
			CommentTextView.Text = ViewModel.CommentPlaceholder;

			CommentTextView.TextContainer.LineFragmentPadding = 8;
			CommentTextView.TextContainerInset = new UIEdgeInsets(top: 3.7f, left: 0f, bottom: 2.3f, right: 0f);
			CommentTextView.BackgroundColor = ThemeManager.Instance.CurrentTheme.BackgroundColor.ToUIColor();
			CommentTextView.Layer.CornerRadius = 5;
		}

		private void InitBindings ()
		{
			this.SetBinding (
				() => CommentTextView.Text,
				() => ViewModel.Comments,
				BindingMode.TwoWay
			).UpdateSourceTrigger("Changed");

			ReplyButton.SetCommand ("TouchUpInside", ViewModel.ReplyCommand);

			ViewModel.RequestCanExecute = OnRequestCanExecute;
			ViewModel.RequestDismissKeyboard = OnRequestDismissKeyboard;
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);

			if(segue.DestinationViewController.GetType() == typeof(PSObservableTableController)) {

				_tableController = segue.DestinationViewController as PSObservableTableController;

				_tableController.Collection = ViewModel.CardViewModels;
				_tableController.SetEstimatedHeight (175);
			}
		}

		#endregion

		#region Methods

		private void KeyboardDidShow (NSNotification notification)
		{
//			_tableController.TableView.ScrollToBottom (true);
		}

		private void KeyboardWillShow (NSNotification notification)
		{
			var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);

			KeyboardWillChange (keyboardFrame.Height, notification);
		}

		private void KeyboardDidHide (NSNotification notification)
		{
//			_tableController.TableView.ScrollToBottom (true);
		}

		private void KeyboardWillHide (NSNotification notification)
		{
			KeyboardWillChange (0, notification);
		}

		private void KeyboardWillChange(nfloat bottom, NSNotification notification)
		{
			var duration = UIKeyboard.AnimationDurationFromNotification (notification);

			CommentContainerView.SetNeedsLayout ();

			CommentContainerViewBottomConstraint.Constant = bottom;

			UIView.Animate (
				duration: duration,
				animation: CommentContainerView.LayoutIfNeeded
			);
		}

		private void OnCommentTextViewChanged (object sender, EventArgs args)
		{
			// Set bounds for text
			var height = CommentTextView.SizeThatFits(new CGSize(CommentTextView.Frame.Width, nfloat.MaxValue)).Height;

			height = height > 100 ? 100 : height;
			height = height < 24 ? 24 : height;

			CommentTextView.SetNeedsLayout ();

			CommentTextViewHeightConstraint.Constant = height;

			UIView.Animate (
				duration: 0.25, 
				animation: () => {
					CommentTextView.LayoutIfNeeded();
					CommentContainerView.LayoutIfNeeded();
				}
			);
		}

		private void OnRequestCanExecute (bool canExecute)
		{
			ReplyButton.Enabled = canExecute;
		}

		private void OnCommentTextViewStarted (object sender, EventArgs args)
		{
			if(CommentTextView.Text.Equals(ViewModel.CommentPlaceholder))
			{
				CommentTextView.Text = string.Empty;
			}
		}

		private void OnCommentTextViewEnded (object sender, EventArgs args)
		{
			if(string.IsNullOrWhiteSpace(CommentTextView.Text))
			{
				CommentTextView.Text = ViewModel.CommentPlaceholder;
			}
		}

		private void OnRequestDismissKeyboard ()
		{
			CommentTextView.ResignFirstResponder();
		}

		#endregion
	}
}
