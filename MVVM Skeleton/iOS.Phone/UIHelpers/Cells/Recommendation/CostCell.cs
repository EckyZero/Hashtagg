// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;

namespace iOS.Phone
{
	public partial class CostCell : BaseRecommendationDetailCell
	{
		public static NSString Key = new NSString ("CostCell");
		private bool _isFirstLoad = true;
		private ProcedureCostViewModel _viewModel;

		public CostCell (IntPtr handle) : base (handle)
		{
		}

		public override void Configure (BaseRecommendationDetailListItemViewModel itemViewModel)
		{
			if (_isFirstLoad == false)
				return;

			_viewModel = (ProcedureCostViewModel)itemViewModel;
			var previousTitleLabel = CostTitleLabel;
			var previousValueLabel = CostValueLabel;
			var previousButton = TooltipButton;

			TitleLabel.Text = _viewModel.Title;
			TotalLabel.Text = _viewModel.TotalCost;
			AboutLabel.Text = _viewModel.About;

			// Make sure to hide if there is no cost information to display
			if(_viewModel.Items == null || _viewModel.Items.Count == 0)
			{
				CostTitleLabel.Text = String.Empty;
				CostValueLabel.Text = String.Empty;
				TooltipButton.Hidden = true;
			}
			else
			{
				var item = _viewModel.Items [0];

				CostTitleLabel.Text = item.ItemName;
				CostValueLabel.Text = item.Cost.Value.ToString ("C0");
				TooltipButton.Hidden = String.IsNullOrWhiteSpace (item.Summary);
				TooltipButton.TouchUpInside += (sender, e) => _viewModel.TooltipCommand.Execute(item);
				_expandingLabels.Add (AboutLabel);
			}

			for (int i = 1; i < _viewModel.Items.Count; i++)
			{
				var item = _viewModel.Items [i];
				var titleLabel = AddTitleLabelAndConstraints (item, previousTitleLabel, (i == _viewModel.Items.Count - 1));
				var valueLabel = AddValueLabelAndConstraints (item, previousValueLabel);
				var tooltipButton = AddTooltipButtonAndConstraints(item, titleLabel, previousButton);

				previousTitleLabel = titleLabel;
				previousValueLabel = valueLabel;
				previousButton = tooltipButton;

				_expandingLabels.Add (previousTitleLabel);
			}

			this.ContentView.SetNeedsLayout ();
			this.ContentView.LayoutIfNeeded ();

			_isFirstLoad = false;
		}

		private UILabel AddTitleLabelAndConstraints (ProcedureCostItem item, UILabel previousLabel, bool isLastItem)
		{
			var label = new UILabel ();

			// Set Properties
			label.Text = item.ItemName;
			label.Font = previousLabel.Font;
			label.TextColor = previousLabel.TextColor;
			label.Lines = previousLabel.Lines;
			label.LineBreakMode = previousLabel.LineBreakMode;
			label.TranslatesAutoresizingMaskIntoConstraints = false;

			// Add Constraints
			NSLayoutConstraint leftConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Left, NSLayoutRelation.Equal, previousLabel, NSLayoutAttribute.Left, 1, 0);
			NSLayoutConstraint topConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Top, NSLayoutRelation.Equal, previousLabel, NSLayoutAttribute.Bottom, 1, 8);

			this.ContentView.AddSubview (label);
			this.ContentView.AddConstraint (leftConstraint);
			this.ContentView.AddConstraint (topConstraint);

			if(isLastItem)
			{
				NSLayoutConstraint bottomConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Bottom, NSLayoutRelation.Equal, this.TotalTitleLabel, NSLayoutAttribute.Top, 1, -15);

				this.ContentView.AddConstraint (bottomConstraint);
			}
			return label;
		}

		private UILabel AddValueLabelAndConstraints (ProcedureCostItem item, UILabel previousLabel)
		{
			var label = new UILabel ();

			// Set Properties
			label.Text = item.Cost.Value.ToString ("C0");
			label.Font = previousLabel.Font;
			label.TextColor = previousLabel.TextColor;
			label.Lines = previousLabel.Lines;
			label.LineBreakMode = previousLabel.LineBreakMode;
			label.TranslatesAutoresizingMaskIntoConstraints = false;

			// Add constraints
			NSLayoutConstraint rightConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Right, NSLayoutRelation.Equal, previousLabel, NSLayoutAttribute.Right, 1, 0);
			NSLayoutConstraint topConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Top, NSLayoutRelation.Equal, previousLabel, NSLayoutAttribute.Bottom, 1, 8);

			this.ContentView.AddSubview (label);
			this.ContentView.AddConstraint (rightConstraint);
			this.ContentView.AddConstraint (topConstraint);

			return label;
		}

		private UIButton AddTooltipButtonAndConstraints (ProcedureCostItem item, UILabel currentTitleLabel, UIButton previousButton)
		{
			var button = new UIButton ();

			// Set Properties
			button.SetTitle(previousButton.Title(UIControlState.Normal), UIControlState.Normal);
			button.SetImage (previousButton.ImageForState (UIControlState.Normal), UIControlState.Normal);
			button.ImageView.ContentMode = previousButton.ImageView.ContentMode;
			button.Hidden = String.IsNullOrWhiteSpace(item.Summary);
			button.TouchUpInside += (sender, e) => _viewModel.TooltipCommand.Execute(item);
			button.TranslatesAutoresizingMaskIntoConstraints = false;

			NSLayoutConstraint leftConstraint = NSLayoutConstraint.Create (button, NSLayoutAttribute.Leading, NSLayoutRelation.Equal, currentTitleLabel, NSLayoutAttribute.Right, 1, 8);
			NSLayoutConstraint heightConstraint = NSLayoutConstraint.Create (button, NSLayoutAttribute.Height, NSLayoutRelation.Equal, null, NSLayoutAttribute.NoAttribute, 1, 18);
			NSLayoutConstraint widthConstraint = NSLayoutConstraint.Create (button, NSLayoutAttribute.Width, NSLayoutRelation.Equal, null, NSLayoutAttribute.NoAttribute, 1, 18);
			NSLayoutConstraint centerYConstraint = NSLayoutConstraint.Create (button, NSLayoutAttribute.CenterY, NSLayoutRelation.Equal, currentTitleLabel, NSLayoutAttribute.CenterY, 1, 0);

			this.ContentView.AddSubview (button);
			this.ContentView.AddConstraint (leftConstraint);
			this.ContentView.AddConstraint (heightConstraint);
			this.ContentView.AddConstraint (widthConstraint);
			this.ContentView.AddConstraint (centerYConstraint);

			return button;
		}
	}
}
