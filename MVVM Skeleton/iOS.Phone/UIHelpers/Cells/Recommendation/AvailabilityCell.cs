// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using System.Collections.Generic;
using Shared.Common;

namespace iOS.Phone
{
	public partial class AvailabilityCell : BaseRecommendationDetailCell
	{
		public static NSString Key = new NSString ("AvailabilityCell");
		private DoctorRecommendationDetailAvailabilityViewModel _viewModel;

		public AvailabilityCell (IntPtr handle) : base (handle)
		{

		}

		public override void AwakeFromNib ()
		{
			base.AwakeFromNib ();

			CallButton.TouchUpInside += OnCallButtonTapped;
			WebSiteButton.TouchUpInside += OnWebsiteButtonTapped;
			DirectionsButton.TouchUpInside += OnDirectionsButtonTapped;
		}

		private string ValueForKey (DoctorRecommendationDetailAvailabilityViewModel viewModel, Dictionary<string,string> dictionary, string key)
		{
			return viewModel.Hours.ContainsKey(key) ? viewModel.Hours [key] : ApplicationResources.Unknown;	
		}

		public override void Configure (BaseRecommendationDetailListItemViewModel itemViewModel)
		{
			_viewModel = (DoctorRecommendationDetailAvailabilityViewModel)itemViewModel;

			if(_viewModel.Hours == null)
			{
				Day1TitleLabel.Text = String.Empty;
				Day2TitleLabel.Text = String.Empty;
				Day3TitleLabel.Text = String.Empty;
				Day4TitleLabel.Text = String.Empty;
				Day5TitleLabel.Text = String.Empty;
				Day6TitleLabel.Text = String.Empty;
				Day7TitleLabel.Text = String.Empty;	

				Day1ValueLabel.Text = String.Empty;
				Day2ValueLabel.Text = String.Empty;
				Day3ValueLabel.Text = String.Empty;
				Day4ValueLabel.Text = String.Empty;
				Day5ValueLabel.Text = String.Empty;
				Day6ValueLabel.Text = String.Empty;
				Day7ValueLabel.Text = String.Empty;

				HoursTitleLabel.Text = ApplicationResources.HoursUnknown;
				HoursTitleLabel.Font = UIFont.FromName ("HelveticaNeue-LightItalic", HoursTitleLabel.Font.PointSize);
			}
			else
			{
				Day1ValueLabel.Text = ValueForKey (_viewModel, _viewModel.Hours, "Monday");
				Day2ValueLabel.Text = ValueForKey (_viewModel, _viewModel.Hours, "Tuesday");
				Day3ValueLabel.Text = ValueForKey (_viewModel, _viewModel.Hours, "Wednesday");
				Day4ValueLabel.Text = ValueForKey (_viewModel, _viewModel.Hours, "Thursday");
				Day5ValueLabel.Text = ValueForKey (_viewModel, _viewModel.Hours, "Friday");
				Day6ValueLabel.Text = ValueForKey (_viewModel, _viewModel.Hours, "Saturday");
				Day7ValueLabel.Text = ValueForKey (_viewModel, _viewModel.Hours, "Sunday");
			}

			if(!_viewModel.ShowHeader)
			{	
				// This means it's probably a facility availability
				if(String.IsNullOrWhiteSpace(_viewModel.NewPatientAvailability))
				{
					Detail1TitleLabel.Text = "Procedure avail:";
					Detail1ValueLabel.Text = _viewModel.ProcedureAvailability;
					Detail2TitleLabel.Text = String.Empty;
					Detail2ValueLabel.Text = String.Empty;
				}
				else
				{
					Detail1TitleLabel.Text = "New patient avail:";
					Detail1ValueLabel.Text = _viewModel.NewPatientAvailability;
					Detail2TitleLabel.Text = "Procedure avail:";
					Detail2ValueLabel.Text = _viewModel.ProcedureAvailability;
				}

				// Remove other elements associated with a doctor bio
				var labels = new List<UILabel> () { OfficeLabel, DistanceLabel, AddressLabel, AwayLabel, AvailabilityTitleLabel };
				var buttons = new List<UIButton> () { CallButton, WebSiteButton, DirectionsButton};

				RemoveLabels (labels);
				RemoveButtons (buttons);

				NSLayoutConstraint topConstraint = NSLayoutConstraint.Create (HoursTitleLabel, NSLayoutAttribute.Top, NSLayoutRelation.Equal, this.ContentView, NSLayoutAttribute.Top, 1, 15);
				this.ContentView.AddConstraint (topConstraint);
			}
			else
			{
				// This means it's probably a doctor availablity
				Detail1TitleLabel.Hidden = true;
				Detail1ValueLabel.Hidden = true;
				Detail2TitleLabel.Hidden = true;
				Detail2ValueLabel.Hidden = true;

				CallButton.SetTitle (_viewModel.Phone, UIControlState.Normal);
				AddressLabel.Text = _viewModel.Address;
				DistanceLabel.Text = _viewModel.Distance;
			}

			this.ContentView.SetNeedsLayout ();
			this.ContentView.LayoutIfNeeded ();
		}

		private void OnCallButtonTapped (object sender, EventArgs args)
		{
			_viewModel.CallCommand.Execute (null);
		}

		private void OnWebsiteButtonTapped (object sender, EventArgs args)
		{
			_viewModel.WebsiteCommand.Execute (null);
		}

		private void OnDirectionsButtonTapped (object sender, EventArgs args)
		{
			_viewModel.DirectionsCommand.Execute (null);
		}

		private void RemoveLabels(List<UILabel> labels)
		{
			foreach(UILabel label in labels)
			{
				label.Text = String.Empty;
				label.RemoveConstraints (label.Constraints);
			}
		}

		private void RemoveButtons(List<UIButton> buttons)
		{
			foreach(UIButton button in buttons)
			{
				button.SetTitle (String.Empty, UIControlState.Normal);
				button.RemoveConstraints (button.Constraints);
				button.Hidden = true;
			}
		}
	}
}
