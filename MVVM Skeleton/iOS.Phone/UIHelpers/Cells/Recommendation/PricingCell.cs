// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;

namespace iOS.Phone
{
	public partial class PricingCell : BaseRecommendationDetailCell
	{
		public static NSString Key = new NSString ("PricingCell");
		private bool _isFirstLoad = true;
		private DoctorRecommendationDetailPricingViewModel _viewModel;

		public PricingCell (IntPtr handle) : base (handle)
		{
		}

		public override void Configure (BaseRecommendationDetailListItemViewModel itemViewModel)
		{
			if (_isFirstLoad == false)
				return;
			
			_viewModel = (DoctorRecommendationDetailPricingViewModel)itemViewModel;
			var prevTitleLabel = FirstProcedureTitleLabel;
			var prevValueLabel = FirstProcedureValueLabel;
			var prevButton = TooltipButton;

			// Show/collapse the cost superlative and title depending on availability
			if(_viewModel.CostSuperlative == null)
			{
				PricingDetailLabel.Text = String.Empty;
				PricingTitleLabel.Text = String.Empty;
			}
			else
			{
				PricingDetailLabel.Text = _viewModel.CostSuperlative.Description;
			}

			// Show/collapse the common procedures depending on availability
			if(_viewModel.CommonProcedures.Count > 0)
			{
				FirstProcedureTitleLabel.Text = _viewModel.CommonProcedures [0].Procedure.Description;
				FirstProcedureValueLabel.Text = _viewModel.CommonProcedures [0].Cost.ToString();
				TooltipButton.ImageView.ContentMode = UIViewContentMode.ScaleAspectFit;
				TooltipButton.TouchUpInside += (sender, e) => _viewModel.TooltipCommand.Execute(_viewModel.CommonProcedures [0]);

				TooltipButton.Hidden = String.IsNullOrWhiteSpace(_viewModel.CommonProcedures [0].Summary);	
			}
			else
			{
				FirstProcedureTitleLabel.Text = String.Empty;
				FirstProcedureValueLabel.Text = String.Empty;
				ProcedureTitleLabel.Text = String.Empty;
				TooltipButton.Hidden = true;

				NSLayoutConstraint bottomConstraint = NSLayoutConstraint.Create (PricingDetailLabel, NSLayoutAttribute.Bottom, NSLayoutRelation.Equal, this.ContentView, NSLayoutAttribute.Bottom, 1, -15);

				this.ContentView.AddConstraint (bottomConstraint);
			}

			for (int i = 1; i < _viewModel.CommonProcedures.Count; i++) 
			{
				var commonProcedure = _viewModel.CommonProcedures [i];
				var titleLabel = AddTitleLabelAndConstraints (commonProcedure, prevTitleLabel, (i == _viewModel.CommonProcedures.Count - 1));
				var button = AddTooltipButtonAndConstraints (commonProcedure, prevButton, titleLabel);
				var valueLabel = AddValueLabelAndConstraints (commonProcedure, prevValueLabel, titleLabel);

				prevValueLabel = valueLabel;
				prevTitleLabel = titleLabel;
				prevButton = button;
			}

			this.ContentView.SetNeedsLayout ();
			this.ContentView.LayoutIfNeeded ();

			_isFirstLoad = false;
		}

		private UILabel AddTitleLabelAndConstraints (CommonProcedure commonProcedure, UILabel prevLabel, bool isLastProcedure)
		{
			var label = new UILabel ();

			// Set Properties
			label.Text = commonProcedure.Procedure.Description;
			label.Font = prevLabel.Font;
			label.TextColor = prevLabel.TextColor;
			label.Lines = prevLabel.Lines;
			label.LineBreakMode = prevLabel.LineBreakMode;
			label.TranslatesAutoresizingMaskIntoConstraints = false;

			// Add UILabel Constraints
			NSLayoutConstraint leftConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Left, NSLayoutRelation.Equal, prevLabel, NSLayoutAttribute.Left, 1, 0);
			NSLayoutConstraint topConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Top, NSLayoutRelation.Equal, prevLabel, NSLayoutAttribute.Bottom, 1, 8);
			NSLayoutConstraint rightConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Right, NSLayoutRelation.Equal, prevLabel, NSLayoutAttribute.Right, 1, 0);

			this.ContentView.AddSubview (label);
			this.ContentView.AddConstraint (leftConstraint);
			this.ContentView.AddConstraint (topConstraint);
			this.ContentView.AddConstraint (rightConstraint);

			if(isLastProcedure)
			{
				NSLayoutConstraint bottomConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Bottom, NSLayoutRelation.Equal, this.ContentView, NSLayoutAttribute.Bottom, 1, -15);

				this.ContentView.AddConstraint (bottomConstraint);
			}
			return label;
		}

		private UIButton AddTooltipButtonAndConstraints (CommonProcedure commonProcedure, UIButton prevButton, UILabel referenceLabel)
		{
			var button = new UIButton ();

			// Set Properties
			button.SetTitle(prevButton.Title(UIControlState.Normal), UIControlState.Normal);
			button.SetImage (prevButton.ImageForState (UIControlState.Normal), UIControlState.Normal);
			button.ImageView.ContentMode = prevButton.ImageView.ContentMode;
			button.Hidden = String.IsNullOrWhiteSpace(commonProcedure.Summary);
			button.TouchUpInside += (sender, e) => _viewModel.TooltipCommand.Execute(commonProcedure);
			button.TranslatesAutoresizingMaskIntoConstraints = false;

			// Add UIButton Constraints
			NSLayoutConstraint leftConstraint = NSLayoutConstraint.Create (button, NSLayoutAttribute.Left, NSLayoutRelation.Equal, prevButton, NSLayoutAttribute.Left, 1, 0);
			NSLayoutConstraint rightConstraint = NSLayoutConstraint.Create (button, NSLayoutAttribute.Right, NSLayoutRelation.Equal, prevButton, NSLayoutAttribute.Right, 1, 0);
			NSLayoutConstraint centerYConstraint = NSLayoutConstraint.Create (button, NSLayoutAttribute.CenterY, NSLayoutRelation.Equal, referenceLabel, NSLayoutAttribute.CenterY, 1, 0);
			NSLayoutConstraint heightConstraint = NSLayoutConstraint.Create (button, NSLayoutAttribute.Height, NSLayoutRelation.Equal, null, NSLayoutAttribute.NoAttribute, 1, 18);

			this.ContentView.AddSubview (button);
			this.ContentView.AddConstraint (leftConstraint);
			this.ContentView.AddConstraint (rightConstraint);
			this.ContentView.AddConstraint (centerYConstraint);
			this.ContentView.AddConstraint (heightConstraint);

			return button;
		}

		private UILabel AddValueLabelAndConstraints (CommonProcedure commonProcedure, UILabel prevLabel, UILabel referenceLabel)
		{
			var label = new UILabel ();

			// Set Properties
			label.Text = commonProcedure.Cost.ToString();
			label.Font = prevLabel.Font;
			label.TextColor = prevLabel.TextColor;
			label.Lines = prevLabel.Lines;
			label.LineBreakMode = prevLabel.LineBreakMode;
			label.TranslatesAutoresizingMaskIntoConstraints = false;

			// Add UILabel Constraints
			NSLayoutConstraint rightConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.Trailing, NSLayoutRelation.Equal, this.ContentView, NSLayoutAttribute.Right, 1, -50);
			NSLayoutConstraint centerYConstraint = NSLayoutConstraint.Create (label, NSLayoutAttribute.CenterY, NSLayoutRelation.Equal, referenceLabel, NSLayoutAttribute.CenterY, 1, 0);

			this.ContentView.AddSubview (label);
			this.ContentView.AddConstraint (rightConstraint);
			this.ContentView.AddConstraint (centerYConstraint);

			return label;
		}
	}
}
