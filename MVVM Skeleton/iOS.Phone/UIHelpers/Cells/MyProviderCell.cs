// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using GalaSoft.MvvmLight.Helpers;

namespace iOS.Phone
{
	public partial class MyProviderCell : UITableViewCell
	{
		MyDoctorListItemViewModel _currentViewModel;

		public static string Key = new NSString("MyProviderCell");

		public MyProviderCell (IntPtr handle) : base (handle)
		{
		}

		public override void AwakeFromNib ()
		{
			base.AwakeFromNib ();
		}

		public nfloat CalculateHeight (MyDoctorListItemViewModel viewModel)
		{
			nfloat height = UITableView.AutomaticDimension;

			if(Device.OS < 8)
			{
				Configure (viewModel);

				height = this.ContentView.SystemLayoutSizeFittingSize (UILayoutFittingCompressedSize).Height;
				//height = this.SystemLayoutSizeFittingSize (UILayoutFittingCompressedSize).Height;
				//height += SuperlativeLabel.HeightToFitContent ();	
			}

			return height;
		}

		private void KebabButtonInvoked (object sender, EventArgs e)
		{
			if (_currentViewModel != null) {
				_currentViewModel.KebabCommand.Execute (null);
			}
		}

		private void PhoneDoctorButtonInvoked (object sender, EventArgs e)
		{
			if (_currentViewModel != null) {
				_currentViewModel.CallDoctorCommand.Execute (null);
			}
		}

		private void ReviewCountButtonInvoked (object sender, EventArgs e)
		{
			if (_currentViewModel != null) {
				_currentViewModel.ReviewDoctorCommand.Execute (null);
			}
		}


		public void Configure (MyDoctorListItemViewModel viewModel)
		{
			if (_currentViewModel != null) {
				KebabButton.TouchUpInside -= KebabButtonInvoked;
				PhoneDoctorButton.TouchUpInside -= PhoneDoctorButtonInvoked;
				ReviewCount.TouchUpInside -= ReviewCountButtonInvoked;
			}

			_currentViewModel = viewModel;

			KebabButton.TouchUpInside += KebabButtonInvoked;
			PhoneDoctorButton.TouchUpInside += PhoneDoctorButtonInvoked;
			ReviewCount.TouchUpInside += ReviewCountButtonInvoked;

			if (!viewModel.ShowSuperlatives) {
				SuperlativeDivider.Hidden = true;
				SuperlativeIndicatorImage.Hidden = true;

				SuperlativeLabel.Text = null;
				//AdditionalSuperlativeLabel.Text = null;
			
			} else {
				SuperlativeDivider.Hidden = false;
				SuperlativeIndicatorImage.Hidden = false;
				SuperlativeIndicatorImage.Image = UIImage.FromBundle (viewModel.SuperlativeImageName);
				SuperlativeLabel.TextColor = viewModel.SuperlativeColor.ToUIColor();
				SuperlativeLabel.Text = viewModel.Superlative;

				//AdditionalSuperlativeLabel.Text = viewModel.AdditionalSuperlatives;			
			}

			DoctorImage.Image = UIImage.FromBundle (viewModel.DoctorImageName);

			DoctorNameLabel.TextColor = viewModel.NameColor.ToUIColor();
			DoctorNameLabel.Text = viewModel.Name;


			SpecialtyLabel.Text = viewModel.Specialty;
			SpecialtyBottomConstraint.Constant = !string.IsNullOrWhiteSpace(viewModel.Specialty) && !string.IsNullOrWhiteSpace(viewModel.ReviewCount) ? 5 : 0;

			SideBarIndicator.BackgroundColor = viewModel.SideBarColor.ToUIColor();

			PhoneButtonHeightConstraint.Constant = viewModel.ShowPhoneImage ? 45 : 0;

			MainCellView.BackgroundColor = viewModel.BackgroundColor.ToUIColor();

			YearsExperienceLabel.Text = viewModel.YearsExperienceText;
			YearsExperienceLabel.TextColor = SharedColors.Black.ToUIColor ();
			YearsExperienceBottomConstraint.Constant = !string.IsNullOrWhiteSpace(viewModel.YearsExperienceText) && viewModel.ShowSuperlatives ? 30 :0 ;

			ReviewCount.SetTitle(viewModel.ReviewCount,UIControlState.Normal);
			ReviewCount.SetTitle(viewModel.ReviewCount,UIControlState.Selected);
			ReviewCount.SetTitle(viewModel.ReviewCount,UIControlState.Highlighted);
			ReviewBottomConstraint.Constant = !string.IsNullOrWhiteSpace(viewModel.ReviewCount) && !string.IsNullOrWhiteSpace(viewModel.YearsExperienceText) ? 14 : 0;

			if(!viewModel.ShouldShowStarControl)
			{
				StarViewWidthConstraint.Constant = 0;
				StarReviewRightConstraint.Constant = 0;
			}
			else
			{
				StarViewWidthConstraint.Constant = 70;
				StarReviewRightConstraint.Constant = 10;
			}

			if(!viewModel.ShouldShowStarControl && !string.IsNullOrWhiteSpace(viewModel.ReviewURL))
			{
				ReviewCount.SetTitleColor (SharedColors.LinkColor.ToUIColor (), UIControlState.Normal);
				ReviewCount.SetTitleColor (SharedColors.LinkColor.ToUIColor (), UIControlState.Selected);
				ReviewCount.SetTitleColor (SharedColors.LinkColor.ToUIColor (), UIControlState.Highlighted);
			}
			else
			{
				ReviewCount.SetTitleColor (SharedColors.GrayText.ToUIColor (), UIControlState.Normal);
				ReviewCount.SetTitleColor (SharedColors.GrayText.ToUIColor (), UIControlState.Selected);
				ReviewCount.SetTitleColor (SharedColors.GrayText.ToUIColor (), UIControlState.Highlighted);
			}

			this.StarReviews.AddStarRatingControl (viewModel.ReviewScore ?? 0m);

			GenderImageViewHeightConstraint.Constant = viewModel.IsPremier ? 78 : 45;	

			ContentView.SetNeedsLayout ();
			ContentView.LayoutIfNeeded ();
		}
	}
}
