// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using CoreGraphics;
using SDWebImage;
using System.ComponentModel;
using MediaPlayer;
using GalaSoft.MvvmLight.Helpers;

namespace iOS.Phone
{
	public partial class DefaultCell : BaseCell
	{
		#region Variables

		private nfloat _photoImageViewDefaultHeightConstraint = 174;

		#endregion

		#region Properties

		public BaseContentCardViewModel ViewModel { get; set; }
		public UIImage Image { 
			get { return PhotoImageView.Image; }
		}

		public bool ImageHidden {
			get { return PhotoImageView.Hidden; }
			set { PhotoImageView.Hidden = value; }
		}

		public CGRect ImageRect {
			get { return PhotoImageView.Frame; }
		}

		#endregion

		#region Methods

		public DefaultCell (IntPtr handle) : base (handle)
		{
		}

		public override void AwakeFromNib ()
		{
			base.AwakeFromNib ();

			ContainerView.Layer.ShadowColor = UIColor.Black.CGColor;
			ContainerView.Layer.ShadowOpacity = 0.15f;
			ContainerView.Layer.ShadowOffset = new CGSize (0, 1);

			UserImageView.Layer.CornerRadius = UserImageView.Frame.Height / 2;
			BodyTextView.TextContainer.LineFragmentPadding = 0;
			BodyTextView.TextContainerInset = UIEdgeInsets.Zero;

			_photoImageViewDefaultHeightConstraint = PhotoImageViewHeightConstraint.Constant;

			LikeButton.TouchUpInside += LikeButton_TouchUpInside;
			ShareButton.TouchUpInside += ShareButton_TouchUpInside;
			CommentButton.TouchUpInside += CommentButton_TouchUpInside;
		}

		protected override void ConfigureSubviews (IListItem item)
		{
			ViewModel = item as BaseContentCardViewModel;

			InitUI ();
			InitBindings ();
		}

		void InitUI ()
		{
			// Adjust constraints as needed
			PhotoImageViewHeightConstraint.Constant = ViewModel.ShowImage ? _photoImageViewDefaultHeightConstraint : 0;

			// Map values to UI elements
			BodyTextView.Text = null;
			BodyTextView.Text = ViewModel.Text;
			BodyTextViewHeightConstraint.Constant = BodyTextView.SizeThatFits(new CGSize(BodyTextView.Frame.Width, nfloat.MaxValue)).Height;
			TimeLabel.Text = ViewModel.DisplayDateTime;
			NameLabel.SetHighlightText (ViewModel.UserName, ViewModel.UserName.IndexOf ("@"), UIColor.LightGray);

			LikeButton.SetTitle (ViewModel.LikeButtonText, UIControlState.Normal);
			LikeButton.SetTitleColor (ViewModel.LikeButtonTextColor.ToUIColor (), UIControlState.Normal);

			CommentButton.SetTitle (ViewModel.CommentButtonText, UIControlState.Normal);
			CommentButton.SetTitleColor (ViewModel.CommentButtonTextColor.ToUIColor (), UIControlState.Normal);

			ShareButton.SetTitle (ViewModel.ShareButtonText, UIControlState.Normal);
			ShareButton.SetTitleColor (ViewModel.ShareButtonTextColor.ToUIColor (), UIControlState.Normal);

			if(ViewModel.ShowImage) {
				ActivityIndicator.StartAnimating ();
			} else {
				ActivityIndicator.StopAnimating ();
			}

			SocialTypeImageView.Image = UIImage.FromBundle (ViewModel.SocialMediaImage);
			UserImageView.SetImage (
				url: new NSUrl (ViewModel.UserImageUrl), 
				placeholder: UIImage.FromBundle (ViewModel.UserImagePlaceholder)
			);

			if (ViewModel.ShowImage) {
				PhotoImageView.SetImage (
					url: new NSUrl (ViewModel.ImageUrl), 
					completionHandler: ((UIImage image, NSError error, SDImageCacheType cacheType, NSUrl imageUrl) => {
						ActivityIndicator.Hidden = true;
					})
				);	
			} else {
				PhotoImageView.Image = null;
			}
		}

		void InitBindings ()
		{
			ViewModel.PropertyChanged -= OnPropertyChanged;
			ViewModel.PropertyChanged += OnPropertyChanged;

			PhotoImageView.OnClick -= OnPhotoClicked;
			PhotoImageView.OnClick += OnPhotoClicked;
		}

		void OnPropertyChanged (object sender, PropertyChangedEventArgs args)
		{
			var name = args.PropertyName;

			if(name.Equals("IsLikedByUser")) {
				LikeButton.SetTitleColor (ViewModel.LikeButtonTextColor.ToUIColor (), UIControlState.Normal);
				LikeButton.SetTitle (ViewModel.LikeButtonText, UIControlState.Normal);
			}
			else if(name.Equals("IsCommentedByUser")) {
				CommentButton.SetTitleColor (ViewModel.CommentButtonTextColor.ToUIColor (), UIControlState.Normal);
				CommentButton.SetTitle (ViewModel.CommentButtonText, UIControlState.Normal);
			}
			else if(name.Equals("IsSharedByUser")) {
				ShareButton.SetTitleColor (ViewModel.ShareButtonTextColor.ToUIColor (), UIControlState.Normal);
				ShareButton.SetTitle (ViewModel.ShareButtonText, UIControlState.Normal);
			}
		}

		void OnPhotoClicked () 
		{
			ViewModel.MediaCommand.Execute (null);
		}

		void CommentButton_TouchUpInside (object sender, EventArgs e)
		{
			ViewModel.CommentCommand.Execute (null);
		}

		void ShareButton_TouchUpInside (object sender, EventArgs e)
		{
			ViewModel.ShareCommand.Execute (null);
		}

		void LikeButton_TouchUpInside (object sender, EventArgs e)
		{
			ViewModel.LikeCommand.Execute (null);
		}

		#endregion
	}
}
