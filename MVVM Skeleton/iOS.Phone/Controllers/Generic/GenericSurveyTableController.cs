// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.Common;
using Shared.VM;
using System.Collections.Generic;
using System.Linq;
using Shared.Common.TuringTree;
using Shared.Common.Enums.TuringTree;

namespace iOS.Phone
{
	public partial class GenericSurveyTableController : UITableViewController
	{
		SurveyViewModel _viewModel;
		BaseSurveyTableController _containerController;

		public GenericSurveyTableController (IntPtr handle) : base (handle) {}

		public static GenericSurveyTableController Create (SurveyViewModel viewModel, BaseSurveyTableController containerController)
		{
			var storyboard = UIStoryboard.FromName ("SurveyStoryboard", null);
			var childController = storyboard.InstantiateViewController ("GenericSurveyTableController") as GenericSurveyTableController;

			childController._viewModel = viewModel;
			childController._containerController = containerController;
			containerController.ChildViewController = childController;

			containerController.View.AddSubview (childController.TableView);
			containerController.AddChildViewController (childController);

			childController.TableView.Source = containerController.InitDataSource();

			containerController.View.SetNeedsLayout ();
			containerController.View.LayoutIfNeeded ();

			return childController;
		}

		public override async void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			await _viewModel.DidLoad ();

			UIImage image = null;

			TableView.EstimatedRowHeight = 44.0f;

			_containerController.Title = _viewModel.Node.NodeTitle;
			ProgressView.SetProgress (_containerController.NavigationController.ChildViewControllers.Count() * 0.075f, true);
			HeaderLabel.Text = _viewModel.Node.NodeDescription;
			SubHeaderLabel.Text = _viewModel.Node.NodeInstructions;

			TableView.SizeHeaderToFitLabels (new List<UILabel> () { HeaderLabel, SubHeaderLabel });

			switch(_viewModel.Node.NodeImage)
			{
				case DynamicFlowImageType.Doctor:
					image = UIImage.FromFile("Stethicon.png");
					break;
				case DynamicFlowImageType.Facility:
					image = UIImage.FromFile ("facility.png");
					break;
				default:
					var frame = TableView.TableHeaderView.Frame;

//					frame.Height -= ImageViewBottomConstraint.Constant;
					frame.Height -= ImageViewHeightConstraint.Constant;

					TableView.TableHeaderView.Frame = frame;
					ImageViewBottomConstraint.Constant = 0;
					ImageViewHeightConstraint.Constant = 15;

					break;
			}
			ImageView.Image = image;
		}

		public override async void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			await _viewModel.WillAppear ();
		}

		public override async void ViewDidDisappear (bool animated)
		{
			base.ViewDidDisappear (animated);

			// This means the back button was pressed
			if(ParentViewController.NavigationController == null)
			{
				await _viewModel.OnDispose ();
			}
		}

		public override async void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);
			await _viewModel.WillDisappear();

			// Need to reload the data if a single select cell was selected in a multi-select context
			// This is so we can remove checkmarks for multi-select cells if a single-select cell was selected
			if(TableView.IndexPathForSelectedRow != null)
			{
				var indexPaths = TableView.IndexPathsForSelectedRows;

				foreach(NSIndexPath indexPath in indexPaths)
				{
					var section = _viewModel.Node.NodeSections.ElementAt (indexPath.Section);
					var action = section.SectionActions.ElementAt (indexPath.Row);	

					if(action.ActionType == GenericActionType.CustomAction)
					{
						TableView.ReloadData ();
						break;
					}
				}
			}
		}
	}
}
