// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using GalaSoft.MvvmLight.Helpers;
using System.Threading.Tasks;
using System.Linq;
using MapKit;
using CoreLocation;
using CoreGraphics;

namespace iOS.Phone
{
	public partial class GenericRecommendationController : UIViewController
	{
		BaseRecommendationListViewModel _viewModel;
		BaseRecommendationController _containerController;
		UIPanGestureRecognizer _slideGesture;

		private UIBarButtonItem LeftBarButton;
		private bool ShowMoreCanExecute = true;

		public UIBarButtonItem EditBarButton { get; private set; }

		public string TableViewHeaderText 
		{
			get { return YourDoctorLabel.Text; }
			set { YourDoctorLabel.Text = value; }
		}

		public bool ShowReviewLogo
		{
			get 
			{ 
				return !ReviewsByLabel.Hidden;
			}
			set 
			{ 
				ReviewsByLabel.Hidden = !value; 
				ReviewsByImageView.Hidden = !value;
			}
		}

		public string ShowMoreText
		{
			get { return ShowMoreButton.Title (UIControlState.Normal); }
			set { ShowMoreButton.SetTitle (value, UIControlState.Normal); }
		}
			
		public MKMapView Map
		{
			get
			{
				return MapView;
			}
		}

		public GenericRecommendationController (IntPtr handle) : base (handle) { }

		public static GenericRecommendationController Create(BaseRecommendationListViewModel viewModel, BaseRecommendationController containerController)
		{
			var storyboard = UIStoryboard.FromName ("RecommendationsStoryboard", null);
			var childController = storyboard.InstantiateViewController ("GenericRecommendationController") as GenericRecommendationController;

			childController._viewModel = viewModel;
			childController._containerController = containerController;
			containerController.ChildController = childController;

			containerController.AddChildViewController (childController);
			containerController.View.AddSubview (childController.View);

			return childController;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			InitBindings ();
			InitUI ();
		}		

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			ActivityIndicator.StopAnimating ();

			ActivityIndicator.Hidden = !ShowMoreCanExecute;
			ShowMoreButton.Hidden = !ShowMoreCanExecute;
			SlideView.ColorForExpandableSection = SlideView.BackgroundColor;

			ParentViewController.NavigationController.HideBarsWhileScrolling (TableView);
			_slideGesture = SlideView.AddGestureToView (ParentViewController.NavigationController.NavigationBar);	
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);

			SlideView.ShowGestureArrow (ParentViewController.NavigationController.NavigationBar);
			ActivityIndicator.StartAnimating ();

			ActivityIndicator.Hidden = !ShowMoreCanExecute;
			ShowMoreButton.Hidden = !ShowMoreCanExecute;
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			ActivityIndicator.StopAnimating ();
			SlideView.RemoveGestureArrow (ParentViewController.NavigationController.NavigationBar);
			ParentViewController.NavigationController.NavigationBar.RemoveGestureRecognizer (_slideGesture);
		}


		public void RefreshTableView()
		{
			TableView.ReloadData ();
		}

		private void InitBindings ()
		{
			ParentViewController.Title = _viewModel.Title;
			ContextHeaderLabel.Text = _viewModel.ContextHeaderText;
			ContextSubheaderLabel.Text = _viewModel.ContextSubheaderText;

			ShowMoreButton.SetCommand ("TouchUpInside", _viewModel.ShowMoreCommand);

			_viewModel.RequestShowMorePage = OnRequestShowMorePage;
			_viewModel.ShowMoreCanExecute = OnShowMoreCanExecute;
			_viewModel.RequestEditPage = OnRequestEditPage;
		}

		private void InitUI ()
		{
			ShowLegend();
			
			EditBarButton = new UIBarButtonItem (ApplicationResources.Edit, UIBarButtonItemStyle.Plain, OnEditButtonTapped);
			LeftBarButton = ParentViewController.NavigationItem.LeftBarButtonItem;

			EditBarButton.ConfigureToCompassDefaults (bold: false);
			ParentViewController.NavigationItem.SetLeftBarButtonItem (null, false);


			TableView.Source = _containerController.InitDataSource();
			TableView.UserInteractionEnabled = false;

			_containerController.HydrateMap ();

			AddTapGestureToMap ();

			ShowMoreButton.ConfigureToCompassDefaults ();

			SlideView.BackgroundColor = SharedColors.CompassBlue.ToUIColor ();
			SlideView.AddCloseButtonToNavigationItem (ParentViewController.NavigationItem);

			SlideView.DidClose += (object sender, CGPoint e) => {
				ParentViewController.NavigationItem.SetRightBarButtonItem (EditBarButton, true);
				ParentViewController.NavigationItem.SetLeftBarButtonItem (LeftBarButton, true);
				TableView.UserInteractionEnabled = true;
			};

			SlideView.DidChange += (object sender, CGPoint e) => {
				ParentViewController.NavigationItem.SetRightBarButtonItem(null, true);
				ParentViewController.NavigationItem.SetLeftBarButtonItem (null, true);
			};

			SlideView.DidOpen += (object sender, CGPoint e) => {
				TableView.UserInteractionEnabled = false;
			};

			SlideViewHeightConstraint.Constant = View.Frame.Size.Height - 125;

			ParentViewController.NavigationController.SetNavigationBarHidden (false, true);

			SlideView.Open (animated: false);
		}

		private void ShowLegend() {
			if (_viewModel.ShouldShowLegend) {
				MapLegendView.Hidden = false;
				MapLegendImageView.Image = UIImage.FromFile (_viewModel.LegendImage);
				MapLegendButton.TouchUpInside += DismissLegend;	
				MapLegendFullScreenButton.TouchUpInside += DismissLegend;
			} else {
				MapLegendView.Hidden = true;
			}
		}

		private void DismissLegend(object sender, EventArgs e) {
			UIView.Animate (0.25, () => {
				MapLegendView.Alpha = 0;
			}, () => {
				MapLegendView.Hidden = true;

				MapLegendButton.TouchUpInside -= DismissLegend;	
				MapLegendFullScreenButton.TouchUpInside -= DismissLegend;	
			});

		}

		private void OnEditButtonTapped (object sender, EventArgs args)
		{
			_viewModel.EditCommand.Execute (null);
		}

		private async void OnRequestShowMorePage ()
		{
			ShowMoreButton.Hidden = true;

			await Task.Delay (1000);

			ShowMoreButton.Hidden = !ShowMoreCanExecute;
			ActivityIndicator.Hidden = !ShowMoreCanExecute;

			TableView.ReloadData ();

			_containerController.HydrateMap ();
		}

		private void OnShowMoreCanExecute (bool canExecute)
		{
			ShowMoreCanExecute = canExecute;
		}

		private void OnRequestEditPage()
		{
			var storyboard = UIStoryboard.FromName ("SurveyStoryboard", null);

			var controller = storyboard.InstantiateViewController ("DoctorPreferencesController") as DoctorPreferencesController;
			controller.Mode = DoctorPreferencesMode.EditSearch;
			controller.FlowData = _viewModel.FlowData;
			controller.TreeMap = _viewModel.TreeMap;

			controller.RequestRefreshDoctorRecommendationsListAction = RefreshDataFromEditPage;

			var navController = new UINavigationController (controller);
			navController.ConfigureToCompassDefaults ();
			NavigationController.PresentViewController (navController, true, null);
		}

		private void RefreshDataFromEditPage(IRecommendation docRec, GeoLocation preferredLocation)
		{
			_viewModel.PreferredLocation = preferredLocation;
			_containerController.RefreshData (docRec);
		}

		private void AddTapGestureToMap()
		{
			var gesture = new UITapGestureRecognizer (_viewModel.RequestFullMap);

			Map.UserInteractionEnabled = true;
			Map.AddGestureRecognizer (gesture);
		}
	}
}
