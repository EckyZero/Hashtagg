// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using GalaSoft.MvvmLight.Helpers;
using Shared.Common;
using System.ComponentModel;

namespace iOS.Phone
{
	public partial class GenericPromptController : UIViewController
	{
//		protected internal UIBarButtonItem NextBarButtonItem { get; set;}

		public virtual UIImage Image
		{
			get { return ImageView.Image; }
			set { ImageView.Image = value; }
		}

		protected GenericPromptController (IntPtr handle) : base (handle) { }

		public static GenericPromptController Create <T>(BasePromptViewModel<T> viewModel, BasePromptController containerController)
		{
			var storyboard = UIStoryboard.FromName ("IncentiveStoryboard", null);
			var childController = storyboard.InstantiateViewController ("GenericPromptController") as GenericPromptController;

			// Step 1: Set ViewModel Events
			viewModel.RequestLookupPage += containerController.OnRequestLookupPage;
			viewModel.RequestNextPage += containerController.OnRequestNextPage;
			viewModel.RequestPreviousPage += childController.OnRequestPreviousPage;

			viewModel.PropertyChanged += (object sender, PropertyChangedEventArgs e) => 
			{
				if (e.PropertyName.Equals("PromptTitle"))
				{
					childController.PromptButton.Text = viewModel.PromptTitle;
				}
			};

			// Step 2: Setup ContainerController
			containerController.Title = viewModel.Title;

			containerController.View.AddSubview (childController.View);
			containerController.AddChildViewController (childController);

			containerController.View.SetNeedsLayout ();
			containerController.View.LayoutIfNeeded ();

			// Step 3: Setup Child Controller
			childController.PromptButton.Text = viewModel.PromptTitle;
			childController.TitleLabel.Text = viewModel.ContentTitle;
			childController.SubtitleLabel.Text = viewModel.ContentDetail;

			childController.CancelButton.SetCommand ("TouchUpInside", viewModel.CancelCommand);
			childController.PromptButton.SetCommand ("Clicked", viewModel.LookupCommand);

			if (viewModel.ShouldShowPicker) {
				childController.PickerView.PlaceholderText = viewModel.PickerPlaceholder;
				childController.PickerView.PickerOptions = viewModel.PickerData;
				childController.PromptButton.Hidden = true;

				childController.PickerView.PickerSelection += (object sender, EventArgs args) => {
					var e = (PSFloatingPickerControlEventArgs)args;
					var selectedIndex = e.Index;
					viewModel.SelectedText = viewModel.PickerData[selectedIndex];
					childController.PromptButton.Hidden = false;
				};


				//TODO: property not found error
//				childController.SetBinding (
//					() => childController.PickerView.Text,
//					() => viewModel.SelectedText
//				).UpdateTargetTrigger(UpdateTriggerMode.PropertyChanged);
					
			} else {
				childController.RemovePickerView ();
			}
			

			return childController;
		}


			
		public virtual void OnRequestPreviousPage (object sender, EventArgs args)
		{
			ParentViewController.NavigationController.PopViewController (true);
		}

		public void RemovePickerView(){
			PickerView.RemoveFromSuperview ();
			this.View.AddConstraint(NSLayoutConstraint.Create(PromptButton, NSLayoutAttribute.Top,NSLayoutRelation.Equal,SubtitleLabel,NSLayoutAttribute.Bottom,1f,25f));
		}
	}
}
