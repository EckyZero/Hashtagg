// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using System.Collections.ObjectModel;
using System.Linq;

namespace iOS.Phone
{
	public partial class GenericLookupController : UIViewController
	{
		private Action InitDelegates { get; set; }

		public GenericLookupTableController TableController;

		public GenericLookupController (IntPtr handle) : base (handle) {}

		public static GenericLookupController Create <T>(ILookupViewModel<T> viewModel, BaseLookupController<T> containerController, Action<object, EventArgs> selectionChanged = null) where T : IIdentifiable
		{
			// Instantiate controller and add as subview
			var storyboard = UIStoryboard.FromName ("HealthDetailsStoryboard", null);
			var childController = storyboard.InstantiateViewController ("GenericLookupController") as GenericLookupController;

			childController.InitDelegates = containerController.InitDelegates;


			containerController.AddChildViewController (childController);
			containerController.View.AddSubview (childController.View);

			viewModel.SearchFinished += (object sender, SearchEventArgs args) => 
			{
				childController.InvokeOnMainThread (() => 
					{
						if (viewModel.Results.Count > 0 || args.SearchCancelled) 
						{
							childController.TableController.StopAnimating ();
						} 
						else
						{
							childController.TableController.View.Hidden = true;
							childController.ResultErrorLabel.Text = String.Format("{0} {1}",viewModel.ErrorMessage, containerController.SearchBar.Text);
							childController.ResultErrorDetailLabel.Text = viewModel.ErrorDetailMessage;
						}
					}
				);
			};

			containerController.SearchBar.TextChanged += (object sender, UISearchBarTextChangedEventArgs e) => 
			{	
				if (!string.IsNullOrWhiteSpace(e.SearchText))
				{
					childController.AnimateOnSearch ();
				}
			};

			containerController.SearchBar.SearchButtonClicked += (object sender, EventArgs e) => 
			{
				childController.AnimateOnSearch ();
			};

			childController.TableController.SelectionChanged += (object sender, EventArgs e) => 
			{
				if(selectionChanged == null){
					var args = (ObservableTableViewControllerEventArgs<IIdentifiable>)e;
					var item = args.SelectedItem;

					viewModel.SelectedResult = (T)item;
					viewModel.SelectionCommand.Execute (item);
				}
				else{
					selectionChanged(sender, e);
				}
			};

			if (!String.IsNullOrWhiteSpace (containerController.SearchBar.Text)) 
			{
				viewModel.SearchCommand.Execute (containerController.SearchBar.Text);
				childController.AnimateOnSearch ();
			}

			return childController;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			TableController = ChildViewControllers [0] as GenericLookupTableController;

			TableController.StopAnimating ();
		}

		public void OnInitDelegates ()
		{
			InitDelegates ();
		}

		private void AnimateOnSearch()
		{
			TableController.StartAnimating();
			TableController.View.Hidden = false;
		}
	}
}
