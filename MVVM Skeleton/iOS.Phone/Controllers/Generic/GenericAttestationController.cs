// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using GalaSoft.MvvmLight.Helpers;
using System.ComponentModel;
using CoreGraphics;

namespace iOS.Phone
{
	public partial class GenericAttestationController : UIViewController
	{
		bool _keyboardIsShown = false;
		protected internal UIBarButtonItem SubmitBarButtonItem { get; set;}

		public GenericAttestationController (IntPtr handle) : base (handle)
		{
		}

		public static GenericAttestationController Create(BaseAttestationViewModel viewModel, BaseAttestationController containerController)
		{
			var storyboard = UIStoryboard.FromName ("IncentiveStoryboard", null);
			var childController = storyboard.InstantiateViewController ("GenericAttestationController") as GenericAttestationController;

			// Step 1: Set ViewModel Events
			viewModel.RequestSubmitPage += containerController.OnRequestSubmitPage;
			viewModel.RequestPreviousPage += childController.OnRequestPreviousPage;
			viewModel.CanExecute += childController.OnSubmitButtonCanExecute;

			viewModel.PropertyChanged += (object sender, PropertyChangedEventArgs e) => 
			{
				if (e.PropertyName.Equals("Name"))
				{
					childController.NameControl.Text = viewModel.Name;
				}
				else if (e.PropertyName.Equals("Phone"))
				{
					childController.PhoneControl.Text = viewModel.Phone;
				}
			};

			// Step 2: Setup ContainerController
			childController.SubmitBarButtonItem = new UIBarButtonItem (ApplicationResources.Submit, UIBarButtonItemStyle.Done, null);
			childController.SubmitBarButtonItem.ConfigureToCompassDefaults ();
			childController.SubmitBarButtonItem.SetCommand ("Clicked", viewModel.SubmitCommand);
			containerController.NavigationItem.SetRightBarButtonItem (childController.SubmitBarButtonItem, true);

			containerController.Title = viewModel.Title;

			containerController.View.AddSubview (childController.View);
			containerController.AddChildViewController (childController);

			// Step 3: Setup Child Controller
			childController.CancelButton.SetCommand ("TouchUpInside", viewModel.CancelCommand);
			childController.SubmitButton.SetCommand ("TouchUpInside", viewModel.SubmitCommand);

			if(String.IsNullOrWhiteSpace(viewModel.ToolTip))
			{
				//				childController.ToolTipLabelHeightConstraint.Constant = 0;
				childController.ToolTipLabelTopConstraint.Constant = 0;
			}

			childController.NameControl.TextChanged += (object sender, EventArgs e) => 
			{
				viewModel.Name = childController.NameControl.Text;
			};

			childController.PhoneControl.TextChanged += (object sender, EventArgs e) => 
			{
				viewModel.Phone = childController.PhoneControl.Text;
			};

			childController.ToolTipLabel.Text = viewModel.ToolTip;
			childController.ContentBodyLabel.Text = viewModel.ContentBody;
			childController.ContentFooterLabel.Text = viewModel.ContentFooter;
			childController.NameControl.PlaceholderText = viewModel.NamePlaceholder;

			if (!viewModel.ShowPhoneTextField) {
				childController.PhoneControlHeightConstraint.Constant = 0;
				childController.PhoneControl.Hidden = true;
			} else {
				childController.PhoneControl.PlaceholderText = viewModel.PhonePlaceholder;
				childController.PhoneControl.KeyboardType = UIKeyboardType.PhonePad;
			}

			return childController;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			SubmitButton.Enabled = false;
			SubmitBarButtonItem.Enabled = false;

			SubmitButton.ConfigureToCompassDefaults ();

			UITapGestureRecognizer tap = new UITapGestureRecognizer (() => {
				if(_keyboardIsShown)
				{
					NameControl.ResignFirstResponder();
				}
			});
				
			View.AddGestureRecognizer (tap);
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			SubmitButton.Enabled = false;
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, KeyboardWillShow);
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, KeyboardWillHide);
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			NSNotificationCenter.DefaultCenter.RemoveObserver (this);

			ScrollView.SetContentOffset (new CGPoint(0,0), false);
		}

		protected virtual void OnRequestPreviousPage (object sender, EventArgs args)
		{
			ParentViewController.NavigationController.PopToRootViewController (true);
		}

		protected virtual void OnSubmitButtonCanExecute (object sender, CanExecuteEventArgs args)
		{
			SubmitButton.Enabled = args.CanExecute;
			SubmitBarButtonItem.Enabled = args.CanExecute;
		}

		private void KeyboardWillShow(NSNotification notification)
		{
			notification.KeyboardWillShow (ref _keyboardIsShown, ScrollView);
			ScrollView.ScrollEnabled = false;
		}

		private void KeyboardWillHide(NSNotification notification)
		{
			notification.KeyboardWillHide (ref _keyboardIsShown, ScrollView);
			ScrollView.ScrollEnabled = true;
		}
	}
}
