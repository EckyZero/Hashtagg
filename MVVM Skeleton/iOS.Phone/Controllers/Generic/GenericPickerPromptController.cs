// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using GalaSoft.MvvmLight.Helpers;

namespace iOS.Phone
{
	public partial class GenericPickerPromptController : UIViewController
	{
		bool _keyboardIsShown = false;
		protected internal UIBarButtonItem NextBarButtonItem { get; set;}

		public UIImage Image
		{
			get { return ImageView.Image; }
			set { ImageView.Image = value; }
		}

		public UITextField TextField
		{
			get { return OtherField; }
		}

		public GenericPickerPromptController (IntPtr handle) : base (handle)
		{

		}

		public static GenericPickerPromptController Create <T>(BasePickerPromptViewModel<T> viewModel, BasePickerPromptController containerController)
		{
			var storyboard = UIStoryboard.FromName ("IncentiveStoryboard", null);
			var childController = storyboard.InstantiateViewController ("GenericPickerPromptController") as GenericPickerPromptController;

			// Step 1: Set ViewModel Events
			viewModel.RequestPreviousPage += childController.OnRequestPreviousPage;
			viewModel.RequestNextPage += containerController.OnRequestNextPage;
			viewModel.CanExecute += childController.OnNextButtonCanExecute;

			// Step 2: Setup ContainerController
			childController.NextBarButtonItem = new UIBarButtonItem (ApplicationResources.Next, UIBarButtonItemStyle.Done, null);
			childController.NextBarButtonItem.ConfigureToCompassDefaults ();
			childController.NextBarButtonItem.SetCommand ("Clicked", viewModel.NextCommand);
			containerController.NavigationItem.SetRightBarButtonItem (childController.NextBarButtonItem, true);

			containerController.Title = viewModel.Title;

			containerController.View.AddSubview (childController.View);
			containerController.AddChildViewController (childController);

			// Step 3: Setup Child Controller
			childController.PickerControl.PickerOptions = viewModel.Options;
			childController.PickerControl.PickerSelection += containerController.OnPickerSelection;
			childController.PickerControl.PlaceholderText = viewModel.PromptPlaceholder;
			childController.TitleLabel.Text = viewModel.ContentTitle;
			childController.SubtitleLabel.Text = viewModel.ContentDetail;
			childController.TextField.Placeholder = viewModel.OtherTextPlaceholder;

			childController.CancelButton.SetCommand ("TouchUpInside", viewModel.CancelCommand);
			childController.NextButton.SetCommand ("TouchUpInside", viewModel.NextCommand);
			childController.OtherField.EditingChanged += (object sender, EventArgs e) => 
			{
				viewModel.OtherText = childController.OtherField.Text;
			};

			return childController;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			NextButton.Enabled = false;
			NextBarButtonItem.Enabled = false;

			NextButton.ConfigureToCompassDefaults ();

			PickerControl.Layer.BorderWidth = 1;
			PickerControl.Layer.CornerRadius = 5;
			PickerControl.Layer.BorderColor = SharedColors.LightGreen.ToUIColor ().CGColor;
			PickerControl.ClipsToBounds = true;
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
		
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, KeyboardWillShow);
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, KeyboardWillHide);
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			NSNotificationCenter.DefaultCenter.RemoveObserver (this);
		}

		public virtual void OnRequestPreviousPage (object sender, EventArgs args)
		{
			ParentViewController.NavigationController.PopViewController (true);
		}

		protected virtual void OnNextButtonCanExecute (object sender, CanExecuteEventArgs args)
		{
			NextButton.Enabled = args.CanExecute;
			NextBarButtonItem.Enabled = args.CanExecute;
		}

		private void KeyboardWillShow(NSNotification notification)
		{
			notification.KeyboardWillShow (ref _keyboardIsShown, ScrollView);
			ScrollView.ScrollEnabled = false;
		}

		private void KeyboardWillHide(NSNotification notification)
		{
			notification.KeyboardWillHide (ref _keyboardIsShown, ScrollView);
			ScrollView.ScrollEnabled = true;
		}
	}
}
