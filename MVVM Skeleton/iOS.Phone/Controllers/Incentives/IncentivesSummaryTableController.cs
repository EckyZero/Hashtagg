// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.BL;
using Shared.Common;
using Microsoft.Practices.Unity;
using System.Collections.Generic;
using System.Linq;
using CoreGraphics;
using Shared.VM;

namespace iOS.Phone
{
	public enum IncentiveSummarySectionType
	{
		RecommendedActions,
		UncompletedIncentives,
		CompletedIncentives
	}

	public partial class IncentivesSummaryTableController : UITableViewController
	{
		IncentiveSummaryViewModel _viewModel;

		public IncentivesSummaryTableController (IntPtr handle) : base (handle)
		{
			_viewModel = new IncentiveSummaryViewModel ();

			_viewModel.RequestIncentiveDetailPage += OnRequestIncentiveDetailPage;
			_viewModel.RequestIncentiveActionDetailPage += OnRequestIncentiveActionDetailPage;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			TableView.RowHeight = 60;

			NavigationController.ConfigureToCompassDefaults (false);
		}

		public override async void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			Title = _viewModel.HasIncentives ? ApplicationResources.MyIncentives : ApplicationResources.Recommendations;

			await _viewModel.DidLoad();
			var tableSource = new IncentiveSummaryTableSource (_viewModel);
			TableView.Source = tableSource;
			InvokeOnMainThread (() => {
				TableView.ReloadData();
				ConfigureHeader ();
			});
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			Title = " ";
		}

		private void OnRequestIncentiveDetailPage (object sender, Incentive incentive)
		{
			var storyboard = UIStoryboard.FromName ("IncentiveStoryboard", null);
			var controller = storyboard.InstantiateViewController ("IncentiveDetailTableController") as IncentiveDetailTableController;

			controller.Incentive = incentive;
			NavigationController.PushViewController (controller, true);
		}
			

		private void OnRequestIncentiveActionDetailPage (object sender, IncentiveAction incentiveAction)
		{
			var storyboard = UIStoryboard.FromName ("IncentiveStoryboard", null);
			var controller = storyboard.InstantiateViewController ("IncentivesActionDetail") as IncentivesActionDetail;

			controller.IncentiveAction = incentiveAction;
			NavigationController.PushViewController (controller, true);
		}

		private void ConfigureHeader()
		{
			UIView view = null;
			if(_viewModel.ShowRecommendedActionsFirst)
			{
				if(_viewModel.Incentives == null || _viewModel.Incentives.Count == 0)
				{
					// No incentives, just recommendations
					view = TableView.DequeueReusableCell (RecommendationsHeaderCell.Key) as RecommendationsHeaderCell;
					((RecommendationsHeaderCell)view).Configure (_viewModel);
				}
				else
				{
					// Yes incentives, all completed and now include recommendations
					view = TableView.DequeueReusableCell (CompletedIncentivesHeaderCell.Key) as CompletedIncentivesHeaderCell;
					((CompletedIncentivesHeaderCell)view).Configure (_viewModel);
				}
			}
			else
			{
				// Yes incentives, some uncompleted
				view = TableView.DequeueReusableCell (UncompleteIncentivesHeaderCell.Key) as UncompleteIncentivesHeaderCell;
				((UncompleteIncentivesHeaderCell)view).Configure (_viewModel);
			}
			TableView.TableHeaderView = view;
		}
	}

	public class IncentiveSummaryTableSource : UITableViewSource 
	{
		IncentiveSummaryViewModel _viewModel;

		public IncentiveSummaryTableSource (IncentiveSummaryViewModel viewModel)
		{
			_viewModel = viewModel;
		}

		public override nint NumberOfSections (UITableView tableView)
		{
			// Each incentive represents a section of actions (with itself as the first row)
			var count = _viewModel.OrderedIncentivesAndRecommendedActions.Count;

			return count;
		}

		public override UIView GetViewForHeader (UITableView tableView, nint section)
		{
			IncentiveHeaderCell header = null;
			var incentive = _viewModel.OrderedIncentivesAndRecommendedActions [(int)section];

			if(_viewModel.ShowRecommendedActionsFirst)
			{
				if(section == 0)
				{
					if(_viewModel.RecommendedActions.Count == 0)
					{
						header = tableView.DequeueReusableCell (IncentiveHeaderCell.Key) as IncentiveHeaderCell;
						header.Configure (IncentiveSummarySectionType.CompletedIncentives);
					}
					else
					{
						header = tableView.DequeueReusableCell (IncentiveHeaderCell.Key) as IncentiveHeaderCell;
						header.Configure (IncentiveSummarySectionType.RecommendedActions);
					}
				}
				else if (section == _viewModel.RecommendedActions.Count)
				{
					header = tableView.DequeueReusableCell (IncentiveHeaderCell.Key) as IncentiveHeaderCell;
					header.Configure (IncentiveSummarySectionType.CompletedIncentives);
				}
				else if(incentive.IsRequired == false)
				{
					var view = new UIView (new CGRect(0,0,0,0.00001f));
					return view;
				}
			}
			else
			{
				if(section == 0)
				{
					header = tableView.DequeueReusableCell (IncentiveHeaderCell.Key) as IncentiveHeaderCell;
					header.Configure (IncentiveSummarySectionType.UncompletedIncentives);
				}
				else if (section == _viewModel.Incentives.Count)
				{
					header = tableView.DequeueReusableCell (IncentiveHeaderCell.Key) as IncentiveHeaderCell;
					header.Configure (IncentiveSummarySectionType.RecommendedActions);
				}
				else if(incentive.IsRequired == false)
				{
					var view = new UIView (new CGRect(0,0,0,0.00001f));
					return view;
				}
			}
			return header;
		}

		public override nfloat GetHeightForHeader (UITableView tableView, nint section)
		{
			IncentiveHeaderCell header = tableView.DequeueReusableCell (IncentiveHeaderCell.Key) as IncentiveHeaderCell;
			var incentive = _viewModel.OrderedIncentivesAndRecommendedActions [(int)section];
			nfloat height = 0;

			if(_viewModel.ShowRecommendedActionsFirst)
			{
				if(section == 0)
				{
					if(_viewModel.RecommendedActions.Count == 0)
					{
						height = header.CalculateHeight  (IncentiveSummarySectionType.CompletedIncentives);
					}
					else
					{
						height = header.CalculateHeight (IncentiveSummarySectionType.RecommendedActions);
					}
				}
				else if (section == _viewModel.RecommendedActions.Count)
				{
					height = header.CalculateHeight  (IncentiveSummarySectionType.CompletedIncentives);
				}
				else if(incentive.IsRequired == false)
				{
					height = 0.00001f;
				}
			}
			else
			{
				if(section == 0)
				{
					height = header.CalculateHeight  (IncentiveSummarySectionType.UncompletedIncentives);
				}
				else if (section == _viewModel.Incentives.Count)
				{
					height = header.CalculateHeight  (IncentiveSummarySectionType.RecommendedActions);
				}
				else if(incentive.IsRequired == false)
				{
					height = 0.00001f;
				}
			}
			return height;
		}

		public override nfloat GetHeightForFooter (UITableView tableView, nint section)
		{
			var height = 1.0f;
			var incentive = _viewModel.OrderedIncentivesAndRecommendedActions [(int)section];

			if(_viewModel.ShowRecommendedActionsFirst)
			{
				if(section == _viewModel.RecommendedActions.Count - 1)
				{
					height = 25;
				}
			}
			else
			{
				if(section == _viewModel.Incentives.Count - 1)
				{
					height = 25;
				}
			}
			if(incentive.IsRequired == false)
			{
				height = 30;
			}
			if(section == _viewModel.OrderedIncentivesAndRecommendedActions.Count - 1)
			{
				height = 30;
			}
			return height;
		}

		public override UIView GetViewForFooter (UITableView tableView, nint section)
		{
			var view = new UIView (new CGRect (0, 0, UIApplication.SharedApplication.KeyWindow.RootViewController.View.Frame.Width, 25));
			var incentive = _viewModel.OrderedIncentivesAndRecommendedActions [(int)section];

			if(incentive.IsRequired == false)
			{
				view = new UIView (new CGRect(0,0,0,0.00001f));
			}
			else
			{
				view.BackgroundColor = SharedColors.Tan1.ToUIColor ();
			}

			return view;
		}


		public override nint RowsInSection (UITableView tableview, nint section)
		{
			// Generate a flat list (in the correct order) so we know which incentive's action will be populating the row
			var flatList = _viewModel.OrderedIncentivesAndRecommendedActions;
			var incentive = flatList [(int)section];
			var count = 0;

			if(incentive.Actions == null || incentive.IsComplete)
			{
				count = 1;
			}
			else if (incentive.IsRequired == false)
			{
				count = incentive.Actions.Count;
			}
			else
			{
				count = incentive.Actions.Count + 1;
			}
			return count;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			var flatList = _viewModel.OrderedIncentivesAndRecommendedActions;
			var incentive = flatList [indexPath.Section];
			IncentiveAction action = null;

			UITableViewCell cell = tableView.DequeueReusableCell (IncentiveDefaultCell.Key);


			if(_viewModel.ShowRecommendedActionsFirst)
			{
				if(indexPath.Section < _viewModel.RecommendedActions.Count)
				{
					cell = tableView.DequeueReusableCell (RecommendedActionCell.Key);
					action = (incentive.Actions != null && incentive.Actions.Count > indexPath.Row) ? incentive.Actions [indexPath.Row] : null;
					((RecommendedActionCell)cell).Configure (action, incentive);
				}
				else if(indexPath.Row == 0)
				{
					cell = tableView.DequeueReusableCell (IncentiveSectionCell.Key);
					((IncentiveSectionCell)cell).Configure (incentive);
				}
				else
				{
					// Default
                    action = (incentive.Actions != null && incentive.Actions.Count >= indexPath.Row) ? incentive.Actions[indexPath.Row - 1] : null;
					cell = tableView.DequeueReusableCell (IncentiveDefaultCell.Key);
					((IncentiveDefaultCell)cell).Configure (action, incentive);
				}
			}
			else
			{
				if(indexPath.Section < _viewModel.Incentives.Count)
				{
					if(indexPath.Row == 0 )
					{
						cell = tableView.DequeueReusableCell (IncentiveSectionCell.Key);
						((IncentiveSectionCell)cell).Configure (incentive);
					}
					else
					{
						// Default
                        action = (incentive.Actions != null && incentive.Actions.Count >= indexPath.Row) ? incentive.Actions[indexPath.Row - 1] : null;
						cell = tableView.DequeueReusableCell (IncentiveDefaultCell.Key);
						((IncentiveDefaultCell)cell).Configure (action, incentive);
					}
				}
				else
				{
					cell = tableView.DequeueReusableCell (RecommendedActionCell.Key);
                    action = (incentive.Actions != null && incentive.Actions.Count > indexPath.Row) ? incentive.Actions[indexPath.Row] : null;
					((RecommendedActionCell)cell).Configure (action, incentive);
				}
			}
			return cell;
		}

		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			var incentive = _viewModel.OrderedIncentivesAndRecommendedActions [indexPath.Section];

            if (incentive.IsRequired == false && incentive.Actions.Count > indexPath.Row)
			{
				_viewModel.IncentiveActionCommand.Execute (incentive.Actions [indexPath.Row]);
			}
			else if(indexPath.Row == 0)
			{
				_viewModel.IncentiveCommand.Execute (incentive);
			}
			else if (incentive.Actions.Count >= indexPath.Row)
			{
				_viewModel.IncentiveActionCommand.Execute (incentive.Actions[indexPath.Row - 1]);
			}
		}
	}
}
