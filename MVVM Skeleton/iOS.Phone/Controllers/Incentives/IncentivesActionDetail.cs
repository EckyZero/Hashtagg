// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using Microsoft.Practices.Unity;
using GalaSoft.MvvmLight.Helpers;
using Shared.BL;
using System.Linq;
using System.Collections.Generic;
using CoreGraphics;

namespace iOS.Phone
{
	public partial class IncentivesActionDetail : ExtendedObservableTableViewController<IncentiveActionStepViewModel>
	{
		IIncentiveBL _incentiveBL;
		private IncentiveActionDetailViewModel _viewModel;

		public IncentivesActionDetail (IntPtr handle) : base (handle)

		{
			_viewModel = new IncentiveActionDetailViewModel ();

			_viewModel.RequestViewBiometricResultsPage += OnRequestViewBiometricResultsPage;
			_viewModel.RequestCannotCompletePage += OnRequestCannotCompletePage;
			_viewModel.RequestMarkAsCompletedPage += OnRequestMarkAsCompletedPage;
			_viewModel.RequestMarkAsCompletedCustomPage += OnRequestMarkAsCompletedCustomPage;
			_viewModel.RequestScheduleDoctorAppointmentPage += OnRequestScheduleDoctorAppointmentPage;

			_incentiveBL = IocContainer.GetContainer ().Resolve<IIncentiveBL> ();
		}

		public IncentiveAction IncentiveAction
		{
			get { return _viewModel.IncentiveAction; }
			set { _viewModel.IncentiveAction = value; }
		}

		public override void ConfigureDelegates ()
		{
			this.TableView.RowHeight = 60;

			this.DataSource = _viewModel.IncentiveActionStepViewModels;

			this.CreateCellDelegate = (id, tableView, indexPath) =>
			{

				var cellVm = _viewModel.IncentiveActionStepViewModels[indexPath.Row];
				if(cellVm.CellType  == IncentiveActionStepCellType.TextTwoButtons){
					var cell = tableView.DequeueReusableCell("PSButtonCellTextTwo")  as PSTwoButtonCell;
					cell.SelectionStyle = UITableViewCellSelectionStyle.None;
					return cell;
				}
				else if(cellVm.CellType  == IncentiveActionStepCellType.TextButton){
					var cell = tableView.DequeueReusableCell("PSButtonCellTextOne")  as PSButtonCell;
					cell.SelectionStyle = UITableViewCellSelectionStyle.None;
					return cell;
				}
				else{
					var cell = tableView.DequeueReusableCell("PSButtonCell")  as PSButtonCell;
					cell.SelectionStyle = UITableViewCellSelectionStyle.None;
					return cell;
				}
			};

			this.BindCellDelegate = (UITableViewCell cell, IncentiveActionStepViewModel incentiveActionStepVm, NSIndexPath indexPath) => {


				var cellVm = _viewModel.IncentiveActionStepViewModels[indexPath.Row];
				if(cellVm.CellType  == IncentiveActionStepCellType.TextTwoButtons){
					var psCell = (PSTwoButtonCell)cell;
					psCell.LeftButtonTouchUpInside -= incentiveActionStepVm.ExecuteStepOne;
					psCell.LeftButtonTouchUpInside += incentiveActionStepVm.ExecuteStepOne;
					psCell.LeftButtonText = incentiveActionStepVm.ButtonOneLabel;

					psCell.RightButtonTouchUpInside -= incentiveActionStepVm.ExecuteStepTwo;
					psCell.RightButtonTouchUpInside += incentiveActionStepVm.ExecuteStepTwo;
					psCell.RightButtonText = incentiveActionStepVm.ButtonTwoLabel;

				}
				else{
					var psCell = (PSButtonCell)cell;
					psCell.TouchUpInside -= incentiveActionStepVm.ExecuteStepOne;
					psCell.TouchUpInside += incentiveActionStepVm.ExecuteStepOne;
					psCell.ButtonText = incentiveActionStepVm.ButtonOneLabel;
				}

			};
		}

		private void SetDescriptionLabelAndResizeContainerViewToFitText(string text)
		{
			BodyLabel.Text = text;
			var nstext = new NSString (BodyLabel.Text);
			var firstAttributes = new UIStringAttributes {
				Font = this.BodyLabel.Font,
			};
			var currentFrame = TableView.TableHeaderView.Frame;
			var temp = nstext.GetBoundingRect (new CGSize (currentFrame.Width, 0), NSStringDrawingOptions.UsesLineFragmentOrigin, firstAttributes, null);
			currentFrame.Height += temp.Height;
			TableView.TableHeaderView.Frame = currentFrame;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			//TODO: enable binding. Got property not found error
//			InitBindings();

			this.Title = _viewModel.Title;
			//TODO: refactor this into the bindings
			SetDescriptionLabelAndResizeContainerViewToFitText (_viewModel.DescriptionText);
			UpdateScreen ();
		}

		public override async void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
		    await _viewModel.RefreshData(() => UpdateScreen());
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);
			_viewModel.RemoveEventHandlerAssociationsWithCellVMs ();
		}

		private void UpdateScreen()
		{

			StatusBarView.BackgroundColor = _viewModel.StatusBarColor.ToUIColor ();
			DateLabel.Text = _viewModel.DateText;
			DateTextSubtitleLabel.Text = _viewModel.DateSubtitle;
		}

		private void InitBindings()
		{
			this.SetBinding (
				() => DateLabel.Text,
				() => _viewModel.DateText
			).UpdateTargetTrigger (UpdateTriggerMode.PropertyChanged);

			this.SetBinding (
				() => DateTextSubtitleLabel.Text,
				() => _viewModel.DateSubtitle
			).UpdateTargetTrigger (UpdateTriggerMode.PropertyChanged);
		}

		private void OnRequestViewBiometricResultsPage (object sender, IncentiveAction incentiveAction)
		{
			try{
				var controller = UIStoryboard.FromName ("IncentiveStoryboard", null).InstantiateViewController("BiometricResultsController");
				NavigationController.PushViewController (controller, true);
			}
			catch(Exception e){
				//TODO: remove
				var z = e.ToString ();
			}
		}

		private void OnRequestScheduleDoctorAppointmentPage (object sender, IncentiveAction incentiveAction)
		{
			//TODO: add logic to go to destination controller
			Console.WriteLine ("OnRequestScheduleDoctorAppointmentPage called");
		}

		private void OnRequestMarkAsCompletedPage (object sender, IncentiveAction incentiveAction)
		{
			var controller = new IncentiveCompletedPromptController(incentiveAction);

			NavigationController.PushViewController (controller, true);
		}

		private void OnRequestMarkAsCompletedCustomPage (object sender, IncentiveAction incentiveAction)
		{
			var controller = new IncentiveCompletedAttestationController(null, IncentiveAction, null, null, IncentiveCompletedAttestationControllerMode.LifestyleAttestation);

			NavigationController.PushViewController (controller, true);
		}

		private void OnRequestCannotCompletePage (object sender, IncentiveActionCannotCompleteEventArgs args)
		{
			var controller = new IncentiveCantCompletePickerPromptController (args.Action, args.Step);

			NavigationController.PushViewController (controller, true);
		}
	}
}
