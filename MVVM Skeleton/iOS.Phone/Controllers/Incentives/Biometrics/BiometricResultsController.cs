// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using Shared.BL;
using Microsoft.Practices.Unity;
using GalaSoft.MvvmLight.Helpers;
using CoreGraphics;
using System.Linq;

namespace iOS.Phone
{
	public partial class BiometricResultsController : ExtendedObservableTableViewController<BiometricResultCellViewModel>
	{
		private BiometricResultsViewModel _viewModel;

		public override void ViewDidLoad()
		{
			base.ViewDidLoad ();
			SummaryView.Hidden = true;
			InitBindings ();
		}

		private void InitBindings()
		{
			Title = _viewModel.Title;

			_viewModel.PropertyChanged += (object sender, System.ComponentModel.PropertyChangedEventArgs e) => {
				if(e.PropertyName == "RiskFactorCount"){
					SummaryRiskFactorCountLabel.Text = _viewModel.RiskFactorCount;
				}
				else if(e.PropertyName == "Description"){
					SummaryView.Hidden = false;
					DescriptionLabel.Text = _viewModel.Description;
					TableView.SizeHeaderToFitLabel (DescriptionLabel, true);
					TableView.TableHeaderView = HeaderView;
				}
			};

			_viewModel.RequestUpdateHeaderToReflectEmptyResults += RequestUpdateHeaderToReflectEmptyResults;
		}

		public async override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			await _viewModel.LoadBiometricsData (()=>{

				if(_viewModel.BiometricResults != null){
					foreach(var result in _viewModel.BiometricResults){

						if(result.IsBiometricResult){
							result.MoveToDetailsPageHandler -= OnRequestViewBiometricResultDetailsPage;
							result.MoveToDetailsPageHandler += OnRequestViewBiometricResultDetailsPage;
						}
						else{
							result.MoveToDetailsPageHandler -= OnRequestViewMyIncentivesPage;
							result.MoveToDetailsPageHandler += OnRequestViewMyIncentivesPage;
						}
					}
				}
			});
		}

		public BiometricResultsController (IntPtr handle) : base (handle)
		{
			_viewModel = new BiometricResultsViewModel ();
			Application.VMStore.BiometricResultsVM = _viewModel;
		}

		public override void ConfigureDelegates ()
		{
			this.DataSource = _viewModel.BiometricResults;

			this.CreateCellDelegate = (id, tableView, indexPath) =>
			{
				if(_viewModel.BiometricResults[indexPath.Row].IsBiometricResult){
					var cell = tableView.DequeueReusableCell("BiometricResultCell")  as BiometricResultCell;
					return cell;
				}
				else{
					var cell = tableView.DequeueReusableCell("ButtonCell")  as PSButtonCell;
					return cell;
				}
			};

			this.GetHeightForRowDelegate = ((UITableView tableView, NSIndexPath indexPath) => {
				var cellVm = _viewModel.BiometricResults[indexPath.Row];
				if (cellVm.IsBiometricResult) {
					return 60f;
				} else {
					return 90f;
				}
			});

			this.BindCellDelegate = (UITableViewCell cell, BiometricResultCellViewModel resultVm, NSIndexPath indexPath) => {

				var cellVm = _viewModel.BiometricResults[indexPath.Row];

				if(cellVm.IsBiometricResult){
					var biometricCell = (BiometricResultCell)cell;

					biometricCell.MeasurementDate = cellVm.MeasurementDate;
					biometricCell.MeasurementValue = cellVm.Measurement;
					biometricCell.Status = cellVm.Status;
					biometricCell.Subtitle = cellVm.Subtitle;
					biometricCell.Title = cellVm.Title;

				}
				else{
					var buttonCell = (PSButtonCell)cell;
					buttonCell.ButtonText = cellVm.Title;
					buttonCell.TouchUpInside -= cellVm.RequestViewDetailsPage;
					buttonCell.TouchUpInside += cellVm.RequestViewDetailsPage;
				}
			};

			this.SelectionChanged += (object sender, EventArgs e) => 
			{
//				if(this.SelectedItem.IsBiometricResult){
					this.SelectedItem.RequestViewDetailsPage();
//				}
//				else{
//					//TODO: go to my incentives
//				}
			};


		}

		private void RequestUpdateHeaderToReflectEmptyResults(object sender, EventArgs e)
		{
			if (SummaryView.Superview != null) {

				var summaryViewHeight = (float)SummaryView.Frame.Height;
				SummaryView.RemoveFromSuperview ();

				TableView.TableHeaderView.AddConstraint(NSLayoutConstraint.Create(DescriptionLabel, NSLayoutAttribute.Top, NSLayoutRelation.Equal, TableView.TableHeaderView, NSLayoutAttribute.Top, 1f, 15f));

				TableView.SizeHeaderToFitLabel (DescriptionLabel,true,-1f*summaryViewHeight-25);
				TableView.TableHeaderView = HeaderView;
			}
		}

		private void OnRequestViewBiometricResultDetailsPage (object sender, BiometricResult biometricResult)
		{
			var controller = UIStoryboard.FromName ("IncentiveStoryboard", null).InstantiateViewController("BiometricResultDetailController") as BiometricResultDetailController;
			controller.BiometricData = _viewModel.GetBiometricHistoryFor(biometricResult);
			NavigationController.PushViewController (controller, true);
		}

		private void OnRequestViewMyIncentivesPage (object sender, BiometricResult biometricResult)
		{
			UIViewController vc = NavigationController.ViewControllers.Last (c => c.GetType() == typeof(IncentivesSummaryTableController));
			NavigationController.PopToViewController (vc, animated: true);

		}

	}
}
