// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using System.Collections.Generic;
using Shared.Common;
using System.Linq;

namespace iOS.Phone
{
	public partial class BiometricResultDetailController : ExtendedObservableTableViewController<BiometricResultCellViewModel>
	{
		private BiometricResultDetailViewModel _viewModel;

		private IList<BiometricResult> _biometricData; 
		public IList<BiometricResult> BiometricData 
		{ 
			get { return _biometricData; } 
			set { 
				_biometricData = value;
				_viewModel.OrganizeHistoricalData (_biometricData);
			}
		}


		public BiometricResultDetailController (IntPtr handle) : base (handle)
		{
			_viewModel = new BiometricResultDetailViewModel ();
		}

		public override void ViewDidLoad()
		{
			base.ViewDidLoad ();
			InitBindings ();
			TableView.SizeHeaderToFitLabels (new List<UILabel> (){ ExplanationText, DefinitionText }, true, -1* float.Parse(DefinitionImageView.Frame.Height.ToString()));
		}

		private void InitBindings()
		{

			Title = _viewModel.Title;
			ExplanationText.Text = _viewModel.Description;
			SummaryMeasurementValue.Text = _viewModel.MeasurementValue;
			SummaryDate.Text = _viewModel.MeasurementDate;
			SummaryStatusView.BackgroundColor = _viewModel.SummaryStatusColor.ToUIColor();
			SummaryMeasurementValue.TextColor = _viewModel.SummaryStatusColor.ToUIColor();
			SummaryStatus.Text = _viewModel.SummaryStatusText;
			DefinitionText.Text = _viewModel.DefinitionText;

			_viewModel.PropertyChanged += (object sender, System.ComponentModel.PropertyChangedEventArgs e) => {
				if(e.PropertyName == "Title"){
					Title = _viewModel.Title;
				}
				else if(e.PropertyName == "Description"){
					ExplanationText.Text = _viewModel.Description;
				}
				else if(e.PropertyName == "MeasurementValue"){
					SummaryMeasurementValue.Text = _viewModel.MeasurementValue;
				}
				else if(e.PropertyName == "MeasurementDate"){
					SummaryDate.Text = _viewModel.MeasurementDate;
				}
				else if(e.PropertyName == "SummaryStatusColor"){
					SummaryStatusView.TintColor = _viewModel.SummaryStatusColor.ToUIColor();
					SummaryMeasurementValue.TintColor = _viewModel.SummaryStatusColor.ToUIColor();
				}
				else if(e.PropertyName == "SummaryStatusText"){
					SummaryStatus.Text = _viewModel.SummaryStatusText;
				}
				else if(e.PropertyName == "DefinitionText"){
					DefinitionText.Text = _viewModel.DefinitionText;
				}
			};
		}


		public override void ConfigureDelegates ()
		{
			this.DataSource = _viewModel.BiometricResults;

			this.CreateCellDelegate = (id, tableView, indexPath) =>
			{
				var cellVm = _viewModel.BiometricResults[indexPath.Row];
				if(!cellVm.IsBiometricResult){
					var cell = tableView.DequeueReusableCell("SectionHeaderCell");
					return cell;
				}
				else{
					var cell = tableView.DequeueReusableCell("BiometricResultCell")  as BiometricResultCell;
					cell.HideDrilldownButton();
					return cell;
				}
			};

			this.GetHeightForRowDelegate = ((UITableView tableView, NSIndexPath indexPath) => {
				var cellVm = _viewModel.BiometricResults[indexPath.Row];
				if(!cellVm.IsBiometricResult){
					return 30;
				}
				else{
					return 60;
				}
			});

			this.BindCellDelegate = (UITableViewCell cell, BiometricResultCellViewModel resultVm, NSIndexPath indexPath) => {

				var cellVm = _viewModel.BiometricResults[indexPath.Row];

				if(cellVm.IsBiometricResult){
					var biometricCell = (BiometricResultCell)cell;

					biometricCell.MeasurementDate = cellVm.MeasurementDate;
					biometricCell.MeasurementValue = cellVm.Measurement;
					biometricCell.Status = cellVm.Status;
					biometricCell.Subtitle = cellVm.Subtitle;
				}
			};

		}

	}
}
