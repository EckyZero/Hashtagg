// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.Common;
using Shared.VM;
using GalaSoft.MvvmLight.Helpers;
using Microsoft.Practices.Unity;

namespace iOS.Phone
{
	public partial class SettingsController : ExtendedObservableTableViewController<DependentViewModel>
	{
		SettingsViewModel _viewModel;

		DependentListViewModel _dependentsViewModel;

		public SettingsController (IntPtr handle) : base (handle)
		{
			_viewModel = new SettingsViewModel();
			_dependentsViewModel = IocContainer.GetContainer().Resolve<IDependentListViewModel> () as DependentListViewModel;
		}
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.TableView.RowHeight = 130;
			InitBindings ();

			PopulateStaticData ();
		}

		public override async void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			_viewModel.GetAndUpdateMemberUsername ();

			await _dependentsViewModel.ViewShouldAppear (true);

			ConfigureDelegates ();

			await _dependentsViewModel.Subscribe ();

			if(NavigationController != null)
			{
				NavigationController.SetNavigationBarHidden (false, false);
			}
		}

		public override void ViewWillDisappear (bool animated)
		{
			_dependentsViewModel.Unsubscribe ();
			base.ViewWillAppear (animated);
		}
		void InitBindings ()
		{
			SupportButton.SetCommand ("TouchUpInside", _viewModel.SupportCommand);

			LogoutButton.SetCommand ("TouchUpInside", _viewModel.LogoutCommand);

			ResetPasswordButton.SetCommand ("TouchUpInside", _viewModel.ResetPasswordCommand);

			ResetPINButton.SetCommand ("TouchUpInside", _viewModel.ResetPINCommand);

			EditUsernameButton.SetCommand ("TouchUpInside", _viewModel.EditUsernameCommand);

			InviteFamilyMemberButton.SetCommand ("TouchUpInside", _dependentsViewModel.AddCommand);

			_viewModel.RequestResetPIN += _viewModel_RequestResetPIN;

			_viewModel.RequestLogin += (object sender, EventArgs e) => {

				var splashController = UIStoryboard.FromName("MainStoryboard", null).InstantiateViewController ("SplashController");
				var getStartedPageController = UIStoryboard.FromName("MainStoryboard", null).InstantiateViewController ("GetStartedPageController");
				var loginController = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("LoginController");

				//TODO Handle Recycling or reusing controllers on the stack.
				ParentViewController.NavigationController.SetViewControllers(new UIViewController[]{splashController, getStartedPageController, loginController},true);
			};
		}

		void _viewModel_RequestResetPIN (object sender, EventArgs e)
		{
			UIStoryboard storyboard = UIStoryboard.FromName ("SettingsStoryboard", null);
			var controller = storyboard.InstantiateViewController ("EnterPINResetController") as EnterPINResetController;
			NavigationController.PushViewController (controller, true);
		}

		void PopulateStaticData ()
		{
			Title = _viewModel.Title;
			UsernameLabel.Text = _viewModel.CurrentUsername;
		}

		public override void ConfigureDelegates ()
		{
			this.DataSource = _dependentsViewModel.DependentViewModels;

			this.CreateCellDelegate = (id, tableView, indexPath) => {
				var cell = tableView.DequeueReusableCell (DependentListCell.Key) ?? new DependentListCell();
				return cell;
			};

			this.BindCellDelegate = (UITableViewCell cell, DependentViewModel dependentViewModel, NSIndexPath indexPath) => {

				var dependentCell = (DependentListCell)cell;
				var dependent = dependentViewModel.Model;

				dependentCell.HeaderText = dependent.Relationship;
				dependentCell.BodyText = String.Format("{0} {1}", dependent.FirstName, dependent.LastName);
				dependentCell.ContentFieldOneText = dependent.Username;
				dependentCell.ContentFieldTwoText = dependent.DateOfBirth.Value.ToString("MM/dd/yyyy");
				dependentCell.ContentFieldThreeText = dependent.Gender;

				dependentCell.SetCommand("TouchUpInside", dependentViewModel.ModifyCommand);
			};
		}
	}
}
