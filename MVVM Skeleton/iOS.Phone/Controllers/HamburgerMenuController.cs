// This file has been autogenerated from a class added in the UI designer.

using System;
using Foundation;
using System.Collections.Generic;
using UIKit;
using Shared.VM;
using Shared.Common;
using Microsoft.Practices.Unity;
using GalaSoft.MvvmLight.Helpers;
using Shared.BL;
using System.Linq;
using CoreGraphics;
using Shared.BL.Interfaces;
using Shared.Common.Models.TuringTree;

namespace iOS.Phone
{
	public partial class HamburgerMenuController : UITableViewController
	{
		IMenuItemsBL _menuItemsBL;

		public HamburgerMenuController (IntPtr handle) : base (handle)
		{
			_menuItemsBL = IocContainer.GetContainer().Resolve <IMenuItemsBL> ();
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			var items = _menuItemsBL.GetAll (MenuLocation.SideMenu) ?? new List<MenuItem>();
			TableView.Source = new HamburgerTableSource (items, this); 
		}
	}
	public class HamburgerTableSource : UITableViewSource {
        
        IExtendedDialogService _dialogService;
        IHudService _hudService;
		ITuringTreeBL _treeBL;
		List<MenuItem> _tableItems;
		NSIndexPath _previous;
		UITableViewController _referenceController;

		public HamburgerTableSource (List<MenuItem> items, UITableViewController referenceController)
		{
			_tableItems = items;
			_referenceController = referenceController;
            _treeBL = IocContainer.GetContainer().Resolve<ITuringTreeBL>();
            _dialogService = IocContainer.GetContainer().Resolve<IExtendedDialogService>();

            _hudService = IocContainer.GetContainer().Resolve<IHudService>();
		}

		public override nfloat GetHeightForHeader (UITableView tableView, nint section)
		{
			if (RowsInSection (tableView, section) > 0 && section > 0) {
				//This is not reflected from the Nib
				return (nfloat)50;
			}
			return (nfloat)0;

		}
		public override UIView GetViewForHeader(UITableView tableView, nint section ){
				//Initialize a New Custom Section Header
				var sectionHeader =  new SideMenuHeader();
				sectionHeader.Label = MenuLookup.SectionNames[((MenuSection)(int)section)];
				return sectionHeader;

		}
		public override nint NumberOfSections(UITableView tableView){
			//Calcualte Number of Sections (Max Possible is Count of Enum of Sections)
			int count = Enum.GetNames(typeof(MenuSection)).Length;
			return (nint)count;
		}
		public override nint RowsInSection (UITableView tableview, nint section)
		{
			//Get Rows in Section with Linq (Count all that are in each section and are for this menu)
			int tableSection = (int)section;
			int count = _tableItems.Count (i => Equals ((int)i.Section, tableSection ) && Equals (i.Location, MenuLocation.SideMenu));
			return (nint)count;
		}

		public override async void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			var container	= UIApplication.SharedApplication.KeyWindow.RootViewController.FindViewControllerClass (typeof(HomeContainerController)) as HomeContainerController;
			UIViewController controller = null;

			var tableItemsSection = _tableItems.Where (i => Equals ((int)i.Section, indexPath.Section)).ToList();
			var item = tableItemsSection [indexPath.Row];

			if (item.IsNavigable) {
				switch (item.Action) {
				case MenuActionType.Home:
					controller = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("HomeController");
					break;
				case MenuActionType.MyHealthPro:
					controller = UIStoryboard.FromName ("SettingsStoryboard", null).InstantiateViewController ("HealthProPromptController");

					if ((controller as HealthProPromptController).ViewModel.MemberHealthPro == null) {
						tableView.DeselectRow (indexPath, true);
						return;
					}

					break;
				case MenuActionType.Incentives:
					controller = UIStoryboard.FromName ("IncentiveStoryboard", null).InstantiateViewController ("IncentivesSummaryTableController");
					break;
				case MenuActionType.Recommendations:
					controller = UIStoryboard.FromName ("IncentiveStoryboard", null).InstantiateViewController ("IncentivesSummaryTableController");
					break;
				case MenuActionType.MyDoctors:
					controller = UIStoryboard.FromName ("DoctorsFacilitiesStoryboard", null).InstantiateViewController ("DocFacController");
					break;
				case MenuActionType.DoctorRecommendations:
					var treeInput = new TreeInput () {
						CurrentNodeId = null,
						InvokedActionId = "doctorRecommendationsAction",
						FlowData = new List<ActionData> ()
					};

                     var response = new BLResponse<TreeMap>();

				        try
				        {
				            _hudService.Show();

                            response = await _treeBL.RequestNextTreeMap(treeInput);
				        }
				        finally
				        {
                            _hudService.Dismiss();
				        }

				    if (response.ResponseType == BLResponseType.NO_CONNECTION)
                    {
                        await _dialogService.ShowMessage(ApplicationResources.GenericOffline, "Currently Offline");
                        return;
                    }
					else if (response.ResponseType == BLResponseType.ERROR || response.Result == null || response.Result.Nodes == null || !response.Result.Nodes.Any()  || response.Result.Nodes.ElementAt(0) == null)
                    {
                        await _dialogService.ShowMessage(ApplicationResources.GenericError, "Error Occured");
                        return;
                    }
                    else if (response.ResponseType == BLResponseType.SUCCESS)
                    {
                        TreeMap map = response.Result;
						TreeNode node = map.Nodes.ElementAt(0);
                        var viewModel = new SurveyViewModel(map, node, new FlowData(treeInput.FlowData, FlowType.DoctorRecommendation, node.NodeId));
                        controller = new BaseSurveyTableController(viewModel);
                    }
					break;
				case MenuActionType.HealthDetails:
					controller = UIStoryboard.FromName ("HealthDetailsStoryboard", null).InstantiateViewController ("HealthDetailsController");
					break;
				case MenuActionType.Settings:
					controller = UIStoryboard.FromName ("SettingsStoryboard", null).InstantiateViewController ("SettingsController");
					break;
				case MenuActionType.MyPrescriptions:
					controller = new UIViewController ();
					controller.Title = ApplicationResources.PrescriptionPromptPageTitle;
					var embeddedNavController = new UINavigationController (new MedicationPromptController ());

					controller.AddChildViewController (embeddedNavController);
					controller.View.AddSubview (embeddedNavController.View);

					break;
				case MenuActionType.CostEstimates:
					var treeInputCostEstimate = new TreeInput () {
						CurrentNodeId = null,
						InvokedActionId = "costEstimatesAction",
						FlowData = new List<ActionData> ( ) { new ActionData() { NodeId = "CostEstimate", ActionId = ActionData.COST_ESTIMATE_FLOW_ACTION_ID, ActionValue = true}}
					};


                    var response2 = new BLResponse<TreeMap>();

				        try
				        {
				            _hudService.Show();

                            response2 = await _treeBL.RequestNextTreeMap (treeInputCostEstimate);
				        }
				        finally
				        {
                            _hudService.Dismiss();
				        }

                    if (response2.ResponseType == BLResponseType.NO_CONNECTION)
                    {
                        await _dialogService.ShowMessage(ApplicationResources.GenericOffline, "Currently Offline");
                        return;
                    }
					else if (response2.ResponseType == BLResponseType.ERROR || response2.Result == null || response2.Result.Nodes == null || !response2.Result.Nodes.Any() || response2.Result.Nodes.ElementAt(0) == null)
                    {
                        await _dialogService.ShowMessage(ApplicationResources.GenericError, "Error Occured");
                        return;
                    }
                    else if (response2.ResponseType == BLResponseType.SUCCESS)
                    {
                        TreeMap mapCostEstimate = response2.Result;
						TreeNode nodeCostEstimate = mapCostEstimate.Nodes.ElementAt(0);

                        var viewModelCostEstimate = new SurveyViewModel(mapCostEstimate, nodeCostEstimate,
                            new FlowData(treeInputCostEstimate.FlowData, FlowType.CostEstimate, nodeCostEstimate.NodeId));
                        controller = new BaseSurveyTableController(viewModelCostEstimate);
                    }


				        break;
				default:
				// TODO Delete this code after demo
					controller = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("DoctorPromptController");
					UIStoryboard storyboard = UIStoryboard.FromName ("MainStoryboard", null);
					var temp = storyboard.InstantiateViewController ("MainNavigationController") as UINavigationController;
					((UINavigationController)UIApplication.SharedApplication.KeyWindow.RootViewController).PushViewController (controller, false);
					return;
				// -----------------------
				}
				
				var navController = new UINavigationController (controller);
				navController.ConfigureToCompassDefaults (false);

				container.CenterPanel = navController; 
			} else {
				switch (item.Action) {
				case MenuActionType.Logout:
					var settingsViewModel = new SettingsViewModel ();
					settingsViewModel.RequestLogin += (object sender, EventArgs e) => 
					{
						var splashController = UIStoryboard.FromName("MainStoryboard", null).InstantiateViewController ("SplashController");
						var getStartedPageController = UIStoryboard.FromName("MainStoryboard", null).InstantiateViewController ("GetStartedPageController");
						var loginController = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("LoginController");

						_referenceController.ParentViewController.NavigationController.SetViewControllers(new UIViewController[]{splashController, getStartedPageController, loginController},true);
					};
					settingsViewModel.LogoutCommand.Execute (null);
					break;
				default:
				        return;
				}
			}
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			// in a Storyboard, Dequeue will ALWAYS return a cell, 
			var cell = tableView.DequeueReusableCell (SideMenuCell.Key) as SideMenuCell;
			// now set the properties as normal
			var tableItemsSection = _tableItems.Where (i => Equals ((int)i.Section, indexPath.Section)).ToList();
			var menuItem = tableItemsSection [indexPath.Row];
			cell.Title = menuItem.Title;
			cell.Item = menuItem;
			cell.Image = menuItem.NormalImage;
			cell.SelectionStyle = UITableViewCellSelectionStyle.None;

			return cell;
		}
	}
}
