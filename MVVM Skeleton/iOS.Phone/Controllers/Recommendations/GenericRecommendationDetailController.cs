// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using MapKit;

namespace iOS.Phone
{
	public partial class GenericRecommendationDetailController : UIViewController
	{
		private BaseRecommendationDetailListViewModel _viewModel;
		private BaseRecommendationDetailController _containerController;
		private bool _isFooterShowing = true;
		private bool _isFooterEnabled = true;
		private bool _showBottomSeparator = false;

		public UIBarButtonItem SaveBarButton { get; private set; }
		public bool IsYourDoctor
		{
			get { return !YourDoctorLabel.Hidden; }
			set { YourDoctorLabel.Hidden = !value; }
		}

		public MKMapView Map { get { return MapView;} }

		public bool IsFooterShowing 
		{
			get { return _isFooterShowing; }
			set { _isFooterShowing = value; }
		}
			
		public bool IsFooterEnabled 
		{
			get { return _isFooterEnabled; }
			set { _isFooterEnabled = value; }
		}

		public bool ShowBottomSeparator
		{
			get { return _showBottomSeparator; }
			set { _showBottomSeparator = value; }
		}

		public GenericRecommendationDetailController (IntPtr handle) : base (handle)
		{
		}

		public static GenericRecommendationDetailController Create (BaseRecommendationDetailListViewModel viewModel, BaseRecommendationDetailController containerController)
		{
			var storyboard = UIStoryboard.FromName ("RecommendationsStoryboard", null);
			var childController = storyboard.InstantiateViewController ("GenericRecommendationDetailController") as GenericRecommendationDetailController;

			childController._viewModel = viewModel;
			childController._containerController = containerController;
			containerController.ChildController = childController;

			containerController.AddChildViewController (childController);
			containerController.View.AddSubview (childController.View);

			return childController;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			TableView.Source = _containerController.InitDataSource ();

			InitBindings ();
			InitUI ();
		}

		public void AddFooterView(UIView view)
		{
			FooterView.AddSubview (view);
		}

		public void ShowFooterView (bool animated = true)
		{
			this.FooterView.SetNeedsLayout ();
			this.FooterViewBottomConstraint.Constant = 0;

			Animate (animated, true);
		}

		public void HideFooterView (bool animated = true)
		{
			this.FooterView.SetNeedsLayout ();
			this.FooterViewBottomConstraint.Constant = this.FooterView.Frame.Height * -1;

			Animate (animated, false);
		}

		private void Animate (bool animated, bool willShow)
		{
			if(animated)
			{
				UIView.AnimateNotify (1, 0, 0.4f, 1, 0, () => {
					this.FooterView.LayoutIfNeeded();
				}, (res) => {
					IsFooterShowing = willShow;
				});	
			}
			else
			{
				this.FooterView.LayoutIfNeeded();
				IsFooterShowing = willShow;
			}
		}

		public void HideTableHeader ()
		{
			var frame = TableView.TableHeaderView.Frame;
			frame.Height -= MapViewBottomConstraint.Constant;
			TableView.TableHeaderView.Frame = frame;
			MapViewBottomConstraint.Constant = 0;
			TableView.TableHeaderView.SetNeedsLayout ();
			TableView.TableHeaderView.LayoutIfNeeded ();

			foreach(UIView view in TableView.TableHeaderView.Subviews)
			{
				if(view.GetType() != typeof(MKMapView))
				{
					view.RemoveFromSuperview ();
				}
			}
		}


		public UITableViewCell Deqeue(string identifier)
		{
			var cell = TableView.DequeueReusableCell (identifier);

			return cell;
		}

		private void InitBindings ()
		{
			ParentViewController.Title = _viewModel.Title;
		}

		private void InitUI ()
		{
			SaveBarButton = new UIBarButtonItem (ApplicationResources.Save, UIBarButtonItemStyle.Plain, null);
			SaveBarButton.ConfigureToCompassDefaults (bold: false);
			ParentViewController.NavigationItem.SetRightBarButtonItem (SaveBarButton, true);

			_containerController.HydrateMap ();

			ParentViewController.NavigationController.SetNavigationBarHidden (false, true);
		}

		private void OnBackButtonTapped (object sender, EventArgs args)
		{
			NavigationController.PopViewController (true);
		}
	}
}
