// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.Common;
using Shared.VM;
using System.Collections.Generic;
using System.Linq;
using MapKit;
using CoreLocation;
using Shared.Common.Models.TuringTree;

namespace iOS.Phone
{
	public class DoctorRecommendationController : BaseRecommendationController
	{
		public DoctorRecommendationController (DoctorRecommendation recommendation, FlowData flowData, TreeMap treeMap, PatientPreferences patientPreferences, GeoLocation preferredLocation = null) : base ()  
		{
			_viewModel = new DoctorRecommendationsListViewModel (recommendation, flowData, treeMap, patientPreferences, preferredLocation);

//			foreach(DoctorRecommendationListItemViewModel viewModel in _viewModel.
		} 
			
		public override UITableViewSource InitDataSource ()
		{
			return new DoctorRecommendationsTableSource (_viewModel as DoctorRecommendationsListViewModel, ChildController);
		}

		public override void OnRequestFullMap()
		{
			var controller = new DoctorRecommendationsMapController (_viewModel.MapMarkers, _viewModel.FlowData, _viewModel.PatientPreferences, OnComeBackFromFullMap,_viewModel.PreferredLocation);
			ChildController.ParentViewController.NavigationController.PushViewController (controller, true);
		}

		public void OnComeBackFromFullMap(IRecommendation docRec, Location newLocation)
		{
			if(newLocation.Address != null){
				_viewModel.PreferredLocation = newLocation.Address.Geolocation;
			}

			RefreshData (docRec);
		}

		public override void HydrateMap()
		{
			ChildController.Map.Delegate = new GenericRecommendationsMapDelegate ();

			ChildController.Map.RemoveAnnotations (ChildController.Map.Annotations);

			foreach(var marker in _viewModel.MapMarkers)
			{
				var annotation = new DoctorRecommendationAnnotation (marker);
				ChildController.Map.AddAnnotation (annotation);
			}

			ChildController.Map.CenterAroundAnnotations ();
		}

	}

	public class DoctorRecommendationsTableSource : BaseRecommendationsTableSource
	{
		public DoctorRecommendationsTableSource(DoctorRecommendationsListViewModel viewModel, GenericRecommendationController childController) : base (viewModel, childController) { }

		public override void OnRequestActionPage (BaseRecommendationListItemViewModel baseViewModel)
		{
			var viewModel = baseViewModel as DoctorRecommendationListItemViewModel;
			var detailVM = viewModel.ToDetailActionViewModel();
			var actionSheet = new UIActionSheet();

			if (!detailVM.IsMyDoctor)
			{
				actionSheet.AddButton(ApplicationResources.AddToMyDoctors);
			}
			else
			{
				actionSheet.AddButton(ApplicationResources.RemoveFromMyDoctors);
			}
			actionSheet.AddButton(ApplicationResources.CallDoctor);
			actionSheet.AddButton(ApplicationResources.ScheduleApptWithHealthPro);
			actionSheet.AddButton(ApplicationResources.Cancel);
			actionSheet.DestructiveButtonIndex = 3;
			actionSheet.WillDismiss += (object sender, UIButtonEventArgs e) => {
				switch (e.ButtonIndex)
				{
				case 0:
					detailVM.AddRemoveCommand.Execute(null);
					break;
				case 1:
					detailVM.CallCommand.Execute(null);
					break;
				case 2:
					detailVM.RequestHealthProSchedulePage = OnRequestHealthProSchedulePage;
					detailVM.ScheduleCommand.Execute(null);
					detailVM.RequestHealthProSchedulePage = null;
					break;
				default:
					break;
				}
			};

			actionSheet.ShowInView (_childController.ParentViewController.View);
		}
		private void OnRequestHealthProSchedulePage(Provider provider)
		{
			HealthProQuestionResponseController controller = UIStoryboard.FromName ("SettingsStoryboard", null).InstantiateViewController ("HealthProQuestionResponseController") as HealthProQuestionResponseController;

			controller.SelectedQuestion = new HealthProQuestionViewModel (HealthProQuestionKeys.Appointment);

			controller.NonUserVisableComments = TuringTreeHelpers.FlowDataWalkWithMapToHumanReadableText (_viewModel.TreeMap, _viewModel.FlowData);

			if (provider != null) {
				controller.ViewModel.ProviderId = provider.Id.ToString ();
				controller.ViewModel.ProviderName = provider.DoctorName;
				controller.ViewModel.QuestionComment = TuringTreeHelpers.ProviderScheduleComments (_viewModel.TreeMap, _viewModel.FlowData, provider.DoctorName);

			} else {
				controller.ViewModel.QuestionComment = TuringTreeHelpers.ProviderScheduleComments(_viewModel.TreeMap, _viewModel.FlowData, string.Empty);
			}
			var procedureInformation = TuringTreeHelpers.GetCostEstimateProcedureInformationIfAvailableAndCostEstimateFlow (_viewModel.FlowData);
			if (procedureInformation != null) {
				controller.ViewModel.ProcedureId = procedureInformation.Item2;
				controller.ViewModel.ProcedureName = procedureInformation.Item1;			
			}
				
			//Since we do not have health pro from previous page, ready it up.
			controller.ViewModel.ReadyHealthProFromBL();
			controller.ViewModel.RequestPostSendPage =  () => {
				var returnController = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("HomeContainerController");
				_childController.ParentViewController.NavigationController.ParentViewController.NavigationController.SetViewControllers (new UIViewController[] { returnController }, true);
			};
			controller.ViewModel.RequestCancelPage = () => 	{
				var returnController = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("HomeContainerController");
				_childController.ParentViewController.NavigationController.ParentViewController.NavigationController.SetViewControllers (new UIViewController[] { returnController }, true);
			};

			_childController.ParentViewController.NavigationController.PushViewController(controller,true);
		}
		public override void OnRequestDetailPage (BaseRecommendationDetailListViewModel viewModel, PatientPreferences patientPreferences)
		{
			var controller = new DoctorRecommendationDetailController ((DoctorRecommendationDetailListViewModel)viewModel, patientPreferences);
			_childController.ParentViewController.NavigationController.PushViewController (controller, true);
		}
			
	}
}
