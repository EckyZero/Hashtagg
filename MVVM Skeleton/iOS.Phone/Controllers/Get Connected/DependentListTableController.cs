// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using GalaSoft.MvvmLight.Helpers;

namespace iOS.Phone
{
	public partial class DependentListTableController : ExtendedObservableTableViewController<DependentViewModel>
	{
		public DependentListTableController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.TableView.RowHeight = 130;

			InitBindings ();
		}

		public override async void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			ConfigureDelegates ();
			await Application.VMStore.DependentListVM.Subscribe ();

			bool shouldAppear = await Application.VMStore.DependentListVM.ViewShouldAppear ();

			if(!shouldAppear)
			{
				NavigationController.PopViewController (true);
			}
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillAppear (animated);

			Application.VMStore.DependentListVM.Unsubscribe ();
		}

		public override void ConfigureDelegates ()
		{
			this.DataSource = Application.VMStore.DependentListVM.DependentViewModels;

			this.CreateCellDelegate = (id, tableView, indexPath) => {
				var cell = tableView.DequeueReusableCell (DependentListCell.Key) ?? new DependentListCell();
				return cell;
			};

			this.BindCellDelegate = (UITableViewCell cell, DependentViewModel dependentViewModel, NSIndexPath indexPath) => {

				var dependentCell = (DependentListCell)cell;
				var dependent = dependentViewModel.Model;

				dependentCell.HeaderText = dependent.Relationship;
				dependentCell.BodyText = String.Format("{0} {1}", dependent.FirstName, dependent.LastName);
				dependentCell.ContentFieldOneText = dependent.Username;
				dependentCell.ContentFieldTwoText = dependent.DateOfBirth.Value.ToString("MM/dd/yyyy");
				dependentCell.ContentFieldThreeText = dependent.Gender;

				dependentCell.SetCommand("TouchUpInside", dependentViewModel.ModifyCommand);
			};
		}

		private void InitBindings ()
		{
			NextButton.SetCommand ("TouchUpInside", Application.VMStore.DependentListVM.NextCommand);
			AddAnotherButton.SetCommand ("TouchUpInside", Application.VMStore.DependentListVM.AddCommand);
		}
	}
}
