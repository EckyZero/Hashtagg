// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using Microsoft.Practices.Unity;
using GalaSoft.MvvmLight.Helpers;
using CoreGraphics;

namespace iOS.Phone
{
	public partial class PrescriptionInformationController : UIViewController
	{
		public IPrescriptionInformationViewModel _viewModel;
		private bool _keyboardIsShown = false;
		public bool EditMode 
		{ 
			get
			{
				return Application.VMStore.PrescriptionInformationVM.EditMode;
			}
			set 
			{
				Application.VMStore.PrescriptionInformationVM.EditMode = value;
			}
		}

		public PatientPrescription SelectedPrescription 
		{ 
			get{
				return Application.VMStore.PrescriptionInformationVM.SelectedPrescription;
			}
			set
			{
				Application.VMStore.PrescriptionInformationVM.SelectedPrescription = value;
			} 
		}

		public PrescriptionInformationController (IntPtr handle) : base (handle)
		{
			_viewModel = IocContainer.GetContainer().Resolve<IPrescriptionInformationViewModel> ();
			Application.VMStore.PrescriptionInformationVM = _viewModel;
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			if(NavigationController != null){
				NavigationController.SetNavigationBarHidden (true, true);
			}

			SubscribeToNotifications ();


			ProgressView.Progress = IocContainer.GetContainer ().Resolve<IPrescriptionPromptViewModel> ().Progress;
			ProgressView.Hidden = true;
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);
			UnsubscribeFromNotifications ();
		}

		public override void ViewDidDisappear (bool animated)
		{
			base.ViewDidDisappear (animated);

			DosageTextControl.ResignFirstResponder ();
			FrequencyTextControl.ResignFirstResponder ();
		}


		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			InitBindings ();

		}

		public void InitBindings()
		{
            DosageTextControl.TextChanged += (sender, args) =>
            {
                Application.VMStore.PrescriptionInformationVM.Dosage = DosageTextControl.Text;
            };

		    FrequencyTextControl.TextChanged += (sender, args) =>
		    {
		        Application.VMStore.PrescriptionInformationVM.Frequency = FrequencyTextControl.Text;
		    };
				
			this.SetBinding (
				() => Application.VMStore.PrescriptionInformationVM.Prescription,
				() => PrescriptionLabel.Text
			).UpdateTargetTrigger (UpdateTriggerMode.PropertyChanged);

			CancelButton.SetCommand("TouchUpInside", Application.VMStore.PrescriptionInformationVM.CancelCommand);
			AddItButton.SetCommand("TouchUpInside", Application.VMStore.PrescriptionInformationVM.AddCommand);
			ChangeButton.SetCommand("TouchUpInside", Application.VMStore.PrescriptionInformationVM.ChangeCommand);

			DosageTextControl.PlaceholderText = Application.VMStore.PrescriptionInformationVM.DosagePlaceholder;
			FrequencyTextControl.PlaceholderText = Application.VMStore.PrescriptionInformationVM.FrequencyPlaceholder;

			AddItButton.SetTitle(Application.VMStore.PrescriptionInformationVM.AddButtonText,UIControlState.Normal);
			ChangeButton.Hidden = Application.VMStore.PrescriptionInformationVM.IsChangeButtonHidden;

			DosageTextControl.Text = Application.VMStore.PrescriptionInformationVM.Dosage;
			FrequencyTextControl.Text = Application.VMStore.PrescriptionInformationVM.Frequency;

            Application.VMStore.PrescriptionInformationVM.RequestPostSaveReturnPage += OnRequestPostSaveReturnPage;
        }

        private async void OnRequestPostSaveReturnPage(object sender, EventArgs e)
        {
            await DismissViewControllerAsync(false);
        }

		private void SubscribeToNotifications()
		{
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, KeyboardWillShow);
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, KeyboardWillHide);
		}

		private void UnsubscribeFromNotifications()
		{
			NSNotificationCenter.DefaultCenter.RemoveObserver (this);
		}

		private void KeyboardWillShow(NSNotification notification)
		{

			notification.KeyboardWillShow (ref _keyboardIsShown, ContainerView);
		}

		private void KeyboardWillHide(NSNotification notification)
		{
			notification.KeyboardWillHide (ref _keyboardIsShown, ContainerView);
		}
	}
}
