// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using Microsoft.Practices.Unity;
using System.Collections.Generic;

namespace iOS.Phone
{
	public partial class DoctorLookupListController : BaseLookupController<Provider>
	{
		DoctorLookupListTableController _tableController;

		public Action OnSelectPatientProvider
		{ 
			get { return Application.VMStore.DoctorLookupVM.OnSelectPatientProvider; } 
			set { Application.VMStore.DoctorLookupVM.OnSelectPatientProvider = value; } 
		}

		public Action<Provider> OnSelectAndReturnProvider
		{
			get { return Application.VMStore.DoctorLookupVM.OnSelectAndReturnProvider; }
			set { Application.VMStore.DoctorLookupVM.OnSelectAndReturnProvider = value; }
		}

		public IList<ILookupFilter> Filters
		{
			get { return Application.VMStore.DoctorLookupVM.Filters; }
			set { Application.VMStore.DoctorLookupVM.Filters = value; }
		}

		public string Search { get;set; }

		public DoctorLookupListController (IntPtr handle) : base (handle) { }

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			_tableController = ChildViewControllers [0] as DoctorLookupListTableController;
			_tableController.StopAnimating ();

			SearchBar.TextChanged += (object sender, UISearchBarTextChangedEventArgs e) => 
			{
				if (!string.IsNullOrWhiteSpace(e.SearchText))
				{
					AnimateOnSearch();
				}
			};

			SearchBar.SearchButtonClicked += (object sender, EventArgs e) => 
			{
				AnimateOnSearch();
			};

			if (!String.IsNullOrWhiteSpace (Search)) {
				SearchBar.Text = Search;
				Application.VMStore.DoctorLookupVM.SearchCommand.Execute (Search);
				AnimateOnSearch ();
			}
		}

		private void AnimateOnSearch()
		{
			_tableController.StartAnimating();
			_tableController.View.Hidden = false;
		}

		public override void InitViewModel ()
		{
			ViewModel = IocContainer.GetContainer ().Resolve<IDoctorLookupViewModel> ();
			Application.VMStore.DoctorLookupVM = (IDoctorLookupViewModel)ViewModel;

			Application.VMStore.DoctorLookupVM.SearchFinished += OnSearchFinished;
		}

		private void OnSearchFinished (object sender, SearchEventArgs args)
		{
			InvokeOnMainThread (() => 
				{
					if (Application.VMStore.DoctorLookupVM.Results.Count > 0 || args.SearchCancelled) 
					{
						_tableController.StopAnimating ();
					} 
					else
					{
						_tableController.View.Hidden = true;
						ResultErrorLabel.Text = String.Format("{0} {1}", Application.VMStore.DoctorLookupVM.ErrorMessage, SearchBar.Text);
						ResultErrorDetailLabel.Text = Application.VMStore.DoctorLookupVM.ErrorDetailMessage;
					}
				}
			);
		}
	}
}
