// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using Microsoft.Practices.Unity;
using Shared.BL;
using GalaSoft.MvvmLight.Helpers;

namespace iOS.Phone
{
	public partial class PrescriptionPromptListTableController : ExtendedObservableTableViewController<PatientPrescriptionViewModel>
	{
		public PrescriptionPromptListTableController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.TableView.RowHeight = 106;

			InitBindings ();
		}

		public override async void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			ConfigureDelegates ();
			await Application.VMStore.PrescriptionPromptListVM.Subscribe();

			bool shouldAppear = await Application.VMStore.PrescriptionPromptListVM.ViewShouldAppear ();

			if (!shouldAppear)
			{
				NavigationController.PopViewController (true);
			}
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);

			TableView.ScrollToBottom (true);
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			Application.VMStore.PrescriptionPromptListVM.Unsubscribe();
		}

		public override void ConfigureDelegates ()
		{
			this.DataSource = Application.VMStore.PrescriptionPromptListVM.PatientPrescriptionViewModels;

			this.CreateCellDelegate = (id, tableView, indexPath) => {	
				var cell = tableView.DequeueReusableCell (PSListCell.Key) ?? new PSListCell ();
				return cell;
			};

			this.BindCellDelegate = (UITableViewCell cell, PatientPrescriptionViewModel patientPrescriptionViewModel, NSIndexPath indexPath) => {

				var psCell = (PSListCell)cell;
				var patientPrescription = patientPrescriptionViewModel.Model;

				var header = string.Format("Medication {0}", indexPath.Row + 1);

				string footer;
				if (!String.IsNullOrWhiteSpace(patientPrescription.Dosage) && !String.IsNullOrWhiteSpace(patientPrescription.Frequency))
				{
					footer = string.Format("{0}, {1}", patientPrescription.Dosage, patientPrescription.Frequency);
				}
				else if (String.IsNullOrWhiteSpace(patientPrescription.Dosage) && !String.IsNullOrWhiteSpace(patientPrescription.Frequency))
				{
					footer = string.Format("{0}", patientPrescription.Frequency);
				}
				else if (!String.IsNullOrWhiteSpace(patientPrescription.Dosage) && String.IsNullOrWhiteSpace(patientPrescription.Frequency))
				{
					footer = string.Format("{0}", patientPrescription.Dosage);
				}
				else
				{
					footer = string.Empty;
				}

				psCell.HeaderText = header;
				psCell.ContentText = patientPrescription.Name;
				psCell.FooterText = footer;

				psCell.SetCommand("TouchUpInside", patientPrescriptionViewModel.ModifyCommand);
			};
		}

		private void InitBindings ()
		{
			NextButton.SetCommand ("TouchUpInside", Application.VMStore.PrescriptionPromptListVM.NextCommand);
			AddButton.SetCommand ("TouchUpInside", Application.VMStore.PrescriptionPromptListVM.AddCommand);
		}
	}
}
