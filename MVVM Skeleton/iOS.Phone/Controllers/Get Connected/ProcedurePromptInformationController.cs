// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using Microsoft.Practices.Unity;
using GalaSoft.MvvmLight.Helpers;

namespace iOS.Phone
{
	public partial class ProcedurePromptInformationController : UIViewController
	{
		public IProcedurePromptInformationViewModel _viewModel;
		private bool _keyboardIsShown = false;

		public PatientProcedure SelectedPatientProcedure 
		{
			get { return Application.VMStore.ProcedurePromptInfoVM.SelectedPatientProcedure; }
			set { Application.VMStore.ProcedurePromptInfoVM.SelectedPatientProcedure = value; }
		}

		public bool EditMode 
		{ 
			get { return Application.VMStore.ProcedurePromptInfoVM.EditMode; }
			set { Application.VMStore.ProcedurePromptInfoVM.EditMode = value; }
		}

		public ProcedurePromptInformationController (IntPtr handle) : base (handle)
		{
			_viewModel = IocContainer.GetContainer ().Resolve<IProcedurePromptInformationViewModel> ();
			Application.VMStore.ProcedurePromptInfoVM = _viewModel;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			InitBindings ();
			Title = " ";

		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			if(NavigationController != null)
			{
				NavigationController.SetNavigationBarHidden (true, true);
			}
			ChangeButton.Hidden = EditMode;
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, KeyboardWillShow);
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, KeyboardWillHide);


			ProgressView.Progress = IocContainer.GetContainer ().Resolve<IProcedurePromptViewModel> ().Progress;
			ProgressView.Hidden = true;
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			NSNotificationCenter.DefaultCenter.RemoveObserver (this);
		}

		private void InitBindings ()
		{
			this.SetBinding (
				() => DateControl.Text,
				() => Application.VMStore.ProcedurePromptInfoVM.DateTime,
				BindingMode.TwoWay
			).UpdateSourceTrigger ("TextChanged");

			this.SetBinding (
				() => Application.VMStore.ProcedurePromptInfoVM.ProcedureName,
				() => ProcedureLabel.Text
			).UpdateTargetTrigger (UpdateTriggerMode.PropertyChanged);

			CancelButton.SetCommand ("TouchUpInside", Application.VMStore.ProcedurePromptInfoVM.CancelCommand);
			SaveButton.SetCommand ("TouchUpInside", Application.VMStore.ProcedurePromptInfoVM.SaveCommand);
			ChangeButton.SetCommand ("TouchUpInside", Application.VMStore.ProcedurePromptInfoVM.ChangeCommand);
			DateButton.SetCommand ("TouchUpInside", Application.VMStore.ProcedurePromptInfoVM.CalendarCommand);

			SaveButton.SetTitle(Application.VMStore.ProcedurePromptInfoVM.SaveButtonText,UIControlState.Normal);
			ChangeButton.Hidden = Application.VMStore.ProcedurePromptInfoVM.EditMode;
			DateControl.PlaceholderText = Application.VMStore.ProcedurePromptInfoVM.DatePlaceholder;
			ProcedureLabel.Text = Application.VMStore.ProcedurePromptInfoVM.SelectedPatientProcedure.Description;
			DateControl.Text = Application.VMStore.ProcedurePromptInfoVM.SelectedPatientProcedure.Date.ToCompassDate ();
		}

		private void KeyboardWillShow(NSNotification notification)
		{
			notification.KeyboardWillShow (ref _keyboardIsShown, ContainerView);
		}

		private void KeyboardWillHide(NSNotification notification)
		{
			notification.KeyboardWillHide (ref _keyboardIsShown, ContainerView);
		}
	}
}
