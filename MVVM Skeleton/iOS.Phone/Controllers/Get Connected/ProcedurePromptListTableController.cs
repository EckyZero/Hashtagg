// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using Microsoft.Practices.Unity;
using Shared.BL;
using GalaSoft.MvvmLight.Helpers;

namespace iOS.Phone
{
	public partial class ProcedurePromptListTableController : ExtendedObservableTableViewController<PatientProcedureViewModel>
    {
//        IHudService _hudService;
		
		public ProcedurePromptListTableController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.TableView.RowHeight = 86;

			InitBindings ();

//            _hudService = IocContainer.GetContainer().Resolve<IHudService>();
		}

	    public override async void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear (animated);
			ConfigureDelegates ();
			await Application.VMStore.ProcedurePromptListVM.Subscribe ();

//			// TODO: Erik - May need to move this to the ViewModel
//			var procedureBl = IocContainer.GetContainer ().Resolve<IProcedureBL> ();
//			var memberBL = IocContainer.GetContainer ().Resolve<IMemberBL> ();
//
//			Member currentMember = memberBL.GetCurrentMember ();
//			if (currentMember == null || currentMember.PatientId == null) {
//				return;
//			}
//
//			var patientId = currentMember.PatientId.Value;
//
//			var response = new BLResponse<IList<PatientProcedure>> ();
//
//			try {
//				_hudService.Show ();
//
//				response = await procedureBl.GetAllForMember (patientId, forceSync: false);
//			} finally {
//				_hudService.Dismiss ();
//			}
//
//			var patientProcedures = response.Result ?? new List<PatientProcedure> ();
//
//			if (patientProcedures.Count == 0) {
//				NavigationController.PopViewController (true);
//			}
		}

	    public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);

			TableView.ScrollToBottom (true);
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			Application.VMStore.ProcedurePromptListVM.Unsubscribe();
		}

		public override void ConfigureDelegates ()
		{
			this.DataSource = Application.VMStore.ProcedurePromptListVM.PatientProcedureViewModels;

			this.CreateCellDelegate = (id, tableView, indexPath) => {	
				var cell = tableView.DequeueReusableCell (PSLightListCell.Key) ?? new PSLightListCell();
				return cell;
			};

			this.BindCellDelegate = (UITableViewCell cell, PatientProcedureViewModel patientProcedureViewModel, NSIndexPath indexPath) => {

				var psCell = (PSLightListCell)cell;
				var patientProcedure = patientProcedureViewModel.Model;

				psCell.ContentText = patientProcedure.Description;

				var footer = string.Format("on {0}",patientProcedure.Date.ToCompassDate());
				psCell.FooterText = footer;

				psCell.SetCommand("TouchUpInside", patientProcedureViewModel.ModifyCommand);
			};
		}

		private void InitBindings ()
		{
			NextButton.SetCommand ("TouchUpInside", Application.VMStore.ProcedurePromptListVM.NextCommand);
			AddButton.SetCommand ("TouchUpInside", Application.VMStore.ProcedurePromptListVM.AddCommand);
		}
	}
}
