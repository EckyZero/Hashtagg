// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using Shared.Common;
using System.Threading.Tasks;

using SDWebImage;
using GalaSoft.MvvmLight.Helpers;

namespace iOS.Phone
{
	public partial class HealthProPromptController : ExtendedObservableTableViewController<HealthProQuestionViewModel>
	{
		public HealthProPromptViewModel ViewModel { get; set; }

		public HealthProPromptController (IntPtr handle) : base (handle)
		{
			ViewModel = new HealthProPromptViewModel ();
		}
			
		public override void ViewDidLoad (){
			base.ViewDidLoad ();

			Title = ViewModel.Title;

			var placeholder = UIImage.FromBundle ("GenericHP.png");
			HealthProImage.SetImage (new NSUrl (ViewModel.MemberHealthPro.LargeImageUrl), placeholder,SDWebImageOptions.ContinueInBackground|SDWebImageOptions.RetryFailed);

			CallButton.Hidden = !ViewModel.MemberHealthPro.DirectCallEnabled;
			CallButton.SetCommand ("TouchUpInside", ViewModel.CallCommand);

			HealthProNameBorderBox.Layer.BorderColor = SharedColors.Tan3.ToUIColor ().CGColor;

			ViewModel.RequestPostSelectionPage = OnRequestPostSelectionPage;
		}

		private void  OnRequestPostSelectionPage(HealthProQuestionViewModel selectedQuestionViewModel)
		{
			HealthProQuestionResponseController controller = UIStoryboard.FromName ("SettingsStoryboard", null).InstantiateViewController ("HealthProQuestionResponseController") as HealthProQuestionResponseController;
			controller.SelectedQuestion = selectedQuestionViewModel;
			controller.MemberHealthPro = ViewModel.MemberHealthPro;
			controller.ViewModel.RequestPostSendPage =  () => {
				var returnController = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("HomeContainerController");
				NavigationController.ParentViewController.NavigationController.SetViewControllers (new UIViewController[] { returnController }, true);
			};
			controller.ViewModel.RequestCancelPage = () => 	{
				var returnController = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("HomeContainerController");
				NavigationController.ParentViewController.NavigationController.SetViewControllers (new UIViewController[] { returnController }, true);
			};

			NavigationController.PushViewController(controller,true);
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			HealthProName.Text = ViewModel.MemberHealthPro.FirstName;

			HeaderContent.Text = ViewModel.ContentText;
		}


		public override void ConfigureDelegates ()
		{

			this.TableView.RowHeight = 50;
			this.DataSource = ViewModel.DataSource;

			this.CreateCellDelegate = (id, tableView, indexPath) => 
			{
				return TableView.DequeueReusableCell(HealthProQuestionCell.Key);
			}; 

			this.BindCellDelegate = (UITableViewCell cell, HealthProQuestionViewModel item, NSIndexPath indexPath) => 
			{
				var healthProQuestionCell = cell as HealthProQuestionCell;
				healthProQuestionCell.Question = (item as HealthProQuestionViewModel).Question;
			};
		}
		protected override void OnRowSelected (object item, NSIndexPath indexPath)
		{
			ViewModel.SelectionCommandExecute (item as HealthProQuestionViewModel);
		}

	}
}
