// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Shared.VM;
using System.Linq;
using Shared.Common;
using System.Collections.Generic;
using GalaSoft.MvvmLight.Helpers;
using SDWebImage;

namespace iOS.Phone
{
	public partial class HealthProQuestionResponseController : UIViewController
	{
		private bool _keyboardIsShown;

		public HealthProQuestionCommentViewModel ViewModel { get; set; }

		public HealthProQuestionViewModel SelectedQuestion { get{ return ViewModel.SelectedQuestion;} set{ ViewModel.SelectedQuestion = value;} }

		public HealthPro MemberHealthPro { get{ return ViewModel.MemberHealthPro; } set{ ViewModel.MemberHealthPro = value; } }

		public string NonUserVisableComments { get{ return ViewModel.NotUserVisableComments;} set{ ViewModel.NotUserVisableComments = value; } }

		public HealthProQuestionResponseController (IntPtr handle) : base (handle)
		{
			ViewModel = new HealthProQuestionCommentViewModel ();
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			SubscribeToNotifications ();

			if (SelectedQuestion != null) {
				QuestionControl.Text = ViewModel.QuestionOptions [ViewModel.SelectedQuestionIndex].Question;
				QuestionControl.SelectRow (ViewModel.SelectedQuestionIndex);
			}

			if (!string.IsNullOrWhiteSpace (ViewModel.QuestionComment))
				CommentsTextView.Text = ViewModel.QuestionComment;
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			Title = ViewModel.Title;

			ScrollView.AddGestureRecognizer (
				new UITapGestureRecognizer 
				(
					() => {
							View.EndEditing(true);
					}	
				)
				{
					NumberOfTapsRequired = 1
				}
			);

			SendButton.Enabled = ViewModel.CanExecute ();

			QuestionControl.EditingDidBegin += (sender, e) => {
				if(_keyboardIsShown)
					ScrollView.ScrollRectToVisible(QuestionControl.Frame, true);
			};

			ContactControl.EditingDidBegin += (sender, e) =>{
				if(_keyboardIsShown)
					ScrollView.ScrollRectToVisible(ContactControl.Frame, true);	
			};

			var placeholder = UIImage.FromBundle ("GenericHPSmallSquare.png");
			HealthProImage.SetImage (new NSUrl (ViewModel.MemberHealthPro.SmallImageUrl), placeholder,SDWebImageOptions.ContinueInBackground|SDWebImageOptions.RetryFailed);
			HealthProImage.Layer.BorderColor = SharedColors.White.ToUIColor ().CGColor;

			QuestionControl.PickerOptions = ViewModel.QuestionOptions.Select (c => c.Question).ToList ();
			QuestionControl.PlaceholderText = ViewModel.QuestionPlaceHolderText;
			QuestionControl.PickerSelection += (object sender, EventArgs e) => 
			{
				SelectedQuestion = ViewModel.QuestionOptions[(e as PSFloatingPickerControlEventArgs).Index];
				SendButton.Enabled = ViewModel.CanExecute ();

			};
			QuestionControl.TextChanged += (object sender, EventArgs e) => 
			{ 
				//If the user clears the selection, clear our selected question
				if(string.IsNullOrWhiteSpace(QuestionControl.Text)){
					ViewModel.SelectedQuestion = null;
					SendButton.Enabled = ViewModel.CanExecute ();
				}
			};

			RequestedResponseControl.ReplaceAllSegments (ViewModel.RequestedResponseMethods, false);
			//Default selected segment is second segment, email, all defaults are set for that and email is expected to be second
			RequestedResponseControl.SelectedSegment = ViewModel.RequestedResponseMethods.IndexOf(ViewModel.RequestedResponseMethod);
			RequestedResponseControl.ValueChanged += (object sender, int e) => {
				ContactControl.PlaceholderText = ViewModel.RequestedResponseMethodPlaceholders[e];

				ViewModel.RequestedResponseMethod = ViewModel.RequestedResponseMethodPlaceholders[e];

				if(ViewModel.RequestedResponseMethods[e] == ViewModel.EmailKey){
					ContactControl.Text = ViewModel.DefaultEmail;
					if(ContactControl.IsFirstResponder)
						ContactControl.ResignFirstResponder();
					ContactControl.KeyboardType = UIKeyboardType.EmailAddress;

				}
				else{
					//This is meant to be phone number only
					ContactControl.Text = string.Empty;
					if(ContactControl.IsFirstResponder)
						ContactControl.ResignFirstResponder();
					ContactControl.KeyboardType = UIKeyboardType.PhonePad;

				}

				SendButton.Enabled = ViewModel.CanExecute ();
			};

			ContactControl.TextChanged += (object sender, EventArgs e) => 
			{
				ViewModel.RequestedResponseMethodValue = ContactControl.Text;	
				SendButton.Enabled = ViewModel.CanExecute ();
			};

			ContactControl.KeyboardType = UIKeyboardType.EmailAddress;

			ContactControl.PlaceholderText = ViewModel.RequestedResponseMethodPlaceholders[ViewModel.RequestedResponseMethods.IndexOf(ViewModel.RequestedResponseMethod)];

			ContactControl.Text = ViewModel.DefaultEmail;

			CommentsTextView.Changed += (object sender, EventArgs e) => {
				UITextView textView = sender as UITextView;
				ViewModel.QuestionComment = textView.Text;
				SendButton.Enabled = ViewModel.CanExecute ();
			};

			CommentsTextView.SetPlaceholder(ViewModel.CommentsPlaceholder, UIFont.FromName ("CenturyGothic", 14),SharedColors.Gray3.ToUIColor (), true);

			SendButton.ConfigureToCompassDefaults ();

			SendButton.SetCommand ("TouchUpInside", ViewModel.SendCommand);

			CancelButton.SetCommand ("TouchUpInside", ViewModel.CancelCommand);

			CallButton.SetCommand ("TouchUpInside", ViewModel.CallCommand);

			CallButton.Hidden = !MemberHealthPro.DirectCallEnabled;
		}

		private void SubscribeToNotifications()
		{
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillShowNotification, KeyboardWillShow);
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.WillHideNotification, KeyboardWillHide);
			NSNotificationCenter.DefaultCenter.AddObserver (UIKeyboard.DidShowNotification, KeyboardDidShow);
		}

		private void UnsubscribeFromNotifications()
		{
			NSNotificationCenter.DefaultCenter.RemoveObserver (this);
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);
			UnsubscribeFromNotifications ();
		}

		private void KeyboardWillShow(NSNotification notification)
		{
			_keyboardIsShown = true;
			var keyboardFrame = UIKeyboard.FrameEndFromNotification (notification);
			ScrollViewBottomConstraint.Constant = keyboardFrame.Height;
			ScrollView.SetNeedsLayout ();

			UIView.Animate (0.25, () => {
				ScrollView.LayoutIfNeeded();
			});
		}

		private void KeyboardDidShow(NSNotification notification)
		{
			if (CommentsTextView.IsFirstResponder) {
				ScrollView.ScrollRectToVisible (CommentsTextView.Frame, true);
			} else if (ContactControl.IsFirstResponder) {
				ScrollView.ScrollRectToVisible (ContactControl.Frame, true);
			} else if (QuestionControl.IsFirstResponder) {
				ScrollView.ScrollRectToVisible (QuestionControl.Frame, true);
			}
		}

		private void KeyboardWillHide(NSNotification notification)
		{
			_keyboardIsShown = false;
			ScrollViewBottomConstraint.Constant = 0;
			ScrollView.SetNeedsLayout ();

			UIView.Animate (0.25, () => {
				ScrollView.LayoutIfNeeded();
			});
		}
	}
}
