// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.Collections.Generic;
using Shared.VM;
using GalaSoft.MvvmLight.Helpers;
using System.ComponentModel;
using System.Threading.Tasks;
using Shared.Common.Models.TuringTree;
using CoreGraphics;
using Shared.Common;

namespace iOS.Phone
{
	public partial class DoctorPreferencesController : UIViewController
	{
		public DoctorPreferencesViewModel _viewModel;

		public Action<IRecommendation, GeoLocation> RequestRefreshDoctorRecommendationsListAction { 
			get;
			set;
		}

		private UIView _addressView;

		public FlowData FlowData 
		{ 
			get { return _viewModel.FlowData; }
			set { _viewModel.FlowData = value; }
		}

		public TreeMap TreeMap 
		{ 
			get { return _viewModel.TreeMap; }
			set { _viewModel.TreeMap = value; }
		}

		public DoctorPreferencesMode Mode{
			get { return _viewModel.Mode; }

			set{
				_viewModel.Mode = value;
			}
		}

		public DoctorPreferencesController (IntPtr handle) : base (handle)
		{
			_viewModel = new DoctorPreferencesViewModel (UpdateAddressField);
		}

		public override async void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			_viewModel.CanExecuteAction = OnCanExecute;

			InitAgeAndGenderControls ();

			await _viewModel.DidLoad();

			InitUI ();

			InitBindings ();
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);

			NavigationController.SetNavigationBarHidden (false, true);
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);

			_viewModel.SearchCommandCanExecute();
		}

		private void InitAgeAndGenderControls()
		{
			AgeControl.ReplaceAllSegments (_viewModel.Ages);
			GenderControl.ReplaceAllSegments (_viewModel.Genders);

			AgeControl.SelectedSegment = _viewModel.SelectedAgeIndex;
			GenderControl.SelectedSegment = _viewModel.SelectedGenderIndex;

			AgeControl.Hidden = !_viewModel.ShowAgeGenderOptions;
			AgeHeaderLabel.Hidden = !_viewModel.ShowAgeGenderOptions;
			GenderControl.Hidden = !_viewModel.ShowAgeGenderOptions;
			GenderHeaderLabel.Hidden = !_viewModel.ShowAgeGenderOptions;

			if(!_viewModel.ShowAgeGenderOptions && _viewModel.SelectedLocation == null){
				this.View.AddConstraint(NSLayoutConstraint.Create(SearchButton,NSLayoutAttribute.Top, NSLayoutRelation.Equal, PromptButton,NSLayoutAttribute.Bottom,1, 35));
			}
		}

		private void InitUI ()
		{
			Title = _viewModel.TitleText;

			if (_viewModel.ShowProgressBar) {
				ProgressView.SetProgress (_viewModel.Progress, true);
				ProgressView.Hidden = false;
			} else {
				ProgressView.Hidden = true;
			}

			HeaderLabel.Text = _viewModel.HeaderText;
			PromptButton.Text = _viewModel.PromptText;
			LookupHeaderLabel.Text = _viewModel.LookupHeaderText;

			SearchButton.Enabled = false;
			SearchButton.ConfigureToCompassDefaults ();
			SearchButton.SetTitle(_viewModel.ContinueButtonText, UIControlState.Normal);

			AgeControl.SelectedSegment = _viewModel.SelectedAgeIndex;
			GenderControl.SelectedSegment = _viewModel.SelectedGenderIndex;

			AgeControl.Hidden = !_viewModel.ShowAgeGenderOptions;
			AgeHeaderLabel.Hidden = !_viewModel.ShowAgeGenderOptions;
			GenderControl.Hidden = !_viewModel.ShowAgeGenderOptions;
			GenderHeaderLabel.Hidden = !_viewModel.ShowAgeGenderOptions;

			if(!_viewModel.ShowAgeGenderOptions && _viewModel.SelectedLocation == null){
				this.View.AddConstraint(NSLayoutConstraint.Create(SearchButton,NSLayoutAttribute.Top, NSLayoutRelation.Equal, PromptButton,NSLayoutAttribute.Bottom,1, 35));
			}
		}

		private void InitBindings ()
		{
			_viewModel.RequestCancelPageAction = OnRequestCancelPage;
			_viewModel.RequestLookupPageAction = OnRequestLookupPage;
			_viewModel.RequestSearchPageAction = OnRequestSearchPage;
			_viewModel.RequestPostSavePageAction = OnRequestPostSavePage;

			_viewModel.RequestDoctorRecommendationsResultsPageAction = OnRequestDoctorRecommendationsResultsPageAction;
			_viewModel.RequestCancelPageOnEditAction = OnRequestCancelPageOnEditAction;
			_viewModel.RequestUpdateSearchResultsAction = OnRequestUpdateSearchResultsAction;

			_viewModel.PropertyChanged += (object sender, PropertyChangedEventArgs e) => {
				if(e.PropertyName.Equals("SelectedGenderIndex")) {
					GenderControl.SelectedSegment = _viewModel.SelectedGenderIndex;	
				} 
				else if (e.PropertyName.Equals("SelectedAgeIndex")) {
					AgeControl.SelectedSegment = _viewModel.SelectedAgeIndex;
				}
			};

			GenderControl.ValueChanged += (object sender, int e) => {
				_viewModel.SelectedGenderIndex = e;
			};

			AgeControl.ValueChanged += (object sender, int e) => {
				_viewModel.SelectedAgeIndex = e;
			};


			SearchButton.SetCommand ("TouchUpInside", _viewModel.SearchCommand);
				
			CancelButton.SetCommand ("TouchUpInside", _viewModel.CancelCommand);
			PromptButton.SetCommand ("Clicked", _viewModel.LookupCommand);
		}

		private async void OnRequestCancelPage ()
		{
			if (_viewModel.Mode == DoctorPreferencesMode.EditOnly) {
				NavigationController.PopViewController (true);
				return;
			}

			// NOTE:
			// This is necessary because we need to swap out the entire navigation stack with the home screen
			// Just swapping out doesn't give us the correct navigation bar though (menu button, settings button, title, etc.)
			// AS such, after the animation is completed, we need to swap in another instance of the same controller and place it as the Center Panel
			// a 400 delay was chosen because that is about when the transition animation is completed

			// Animate in dummy controller
			var container = UIApplication.SharedApplication.KeyWindow.RootViewController.FindViewControllerClass (typeof(HomeContainerController)) as HomeContainerController;
			var controller = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("HomeController");

			NavigationController.SetViewControllers(new UIViewController[] {controller}, true);
			await Task.Delay (400);

			// Swap with another controller so we get the hamburger nenu icon
			var temp = UIStoryboard.FromName ("MainStoryboard", null).InstantiateViewController ("HomeController");
			var navController = new UINavigationController (temp);

			navController.ConfigureToCompassDefaults (false);
			container.CenterPanel = navController;
		}

		private void OnRequestLookupPage ()
		{
			var controller = new DrPreferencesLocationLookupController();
			var navController = new UINavigationController (controller);

			navController.ConfigureToCompassDefaults ();

			controller.OnSelect = (locationVm) => {
				NavigationController.DismissViewController(true, null);

				_viewModel.SelectedLocation = locationVm.Location;
				UpdateAddressField(locationVm.Title, locationVm.Subtitle);
			};

			NavigationController.PresentViewController (navController, true, null);
		}

		private void UpdateAddressField(string addressLineOne, string addressLineTwo)
		{
			PromptButton.Hidden = true;

			if(_addressView != null){
				_addressView.RemoveFromSuperview();
			}

			if(string.IsNullOrWhiteSpace(addressLineTwo))
			{
				var frame = new CoreGraphics.CGRect(0, PromptButton.Frame.Y, View.Frame.Width, 38);
				var addressView = new AddressViewSingleLine(frame);

				addressView.OnTapAction = ()=> {
					_viewModel.RequestLookupPageAction();
				};

				addressView.Title = addressLineOne;

				ScrollView.AddSubview(addressView);
				_addressView = addressView;

				if(!_viewModel.ShowAgeGenderOptions){
					this.View.AddConstraint(NSLayoutConstraint.Create(_addressView,NSLayoutAttribute.Top, NSLayoutRelation.Equal, LookupHeaderLabel,NSLayoutAttribute.Bottom,1, 7));
					this.View.AddConstraint(NSLayoutConstraint.Create(SearchButton,NSLayoutAttribute.Top, NSLayoutRelation.Equal, _addressView,NSLayoutAttribute.Bottom,1, 35));
				}

				GenderHeaderTopConstraint.Constant = 10;
				PromptButton.SetNeedsLayout();
				PromptButton.LayoutIfNeeded();
			}
			else{
				var frame = new CoreGraphics.CGRect(0, PromptButton.Frame.Y, View.Frame.Width, 58);
				var addressView = new AddressView(frame);
				addressView.OnTapAction = ()=> {
					_viewModel.RequestLookupPageAction();
				};

				addressView.Title = addressLineOne;
				addressView.Subtitle = addressLineTwo;

				ScrollView.AddSubview(addressView);
				_addressView = addressView;

				if (!_viewModel.ShowAgeGenderOptions) {
					this.View.AddConstraint (NSLayoutConstraint.Create (_addressView, NSLayoutAttribute.Top, NSLayoutRelation.Equal, LookupHeaderLabel, NSLayoutAttribute.Bottom, 1, 7));
					this.View.AddConstraint (NSLayoutConstraint.Create (SearchButton, NSLayoutAttribute.Top, NSLayoutRelation.Equal, _addressView, NSLayoutAttribute.Bottom, 1, 35));
				}

				GenderHeaderTopConstraint.Constant = 30;
				PromptButton.SetNeedsLayout();
				PromptButton.LayoutIfNeeded();
			}
		}


		private void OnRequestSearchPage (FlowData flowData, TreeMap treeMap)
		{
			// TODO: Depending on how this screen was navigated to, may need to press "Save"
			var storyboard = UIStoryboard.FromName ("RecommendationsStoryboard", null);
			var controller = storyboard.InstantiateViewController ("InterstitialController") as InterstitialController;

			var pp = _viewModel.GetPatientPreferencesFromFormData ();
			controller.FlowData = flowData;
			controller.TreeMap = treeMap;
			controller.PatientPreferences = pp;

			NavigationController.PushViewController (controller, true);
		}

		private void OnRequestPostSavePage (){
			NavigationController.PopViewController (true);
		}


		private async void OnRequestDoctorRecommendationsResultsPageAction(FlowData fd, PatientPreferences pp)
		{

			await _viewModel.SearchDoctorRecommendationsUsingPreferences ();


			DismissViewController (true, null);
		}

		private void OnRequestCancelPageOnEditAction()
		{
			DismissViewController (true, null);
		}


		private void OnRequestUpdateSearchResultsAction(IRecommendation docRec, GeoLocation preferredLocation)
		{
			RequestRefreshDoctorRecommendationsListAction (docRec, preferredLocation);

			DismissViewController (true, null);
		}

		private void OnCanExecute (bool res)
		{
			SearchButton.Enabled = res;
		}
	}
}
