// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CoreGraphics;

namespace iOS.Phone
{
	[Register("ExtendedTextView")]
	public partial class ExtendedTextView : UITextView
	{
		bool _firstLoad = true;

		private UIFont _normalFont;
		public UIFont NormalFont { get{ return _normalFont ?? Font; } set{ _normalFont = value; } }
		private UIColor _normalTextColor;
		public UIColor NormalTextColor { get{ return _normalTextColor ?? TextColor; } set{ _normalTextColor = value; }}

		public override string Text {
			get {
				return base.Text;
			}
			set {
				if(value != null){
					Font = NormalFont;
					TextColor = NormalTextColor;
					base.Text = value;
				}
			}
		}

		private UIFont _placeholderFont;
		public UIFont PlaceholderFont {
			get{ return _placeholderFont ?? Font; } 
			set{
				FirstLoad ();
				_placeholderFont = value;
				if (Text == _placeholder)
					Font = value;
			}}
				
		private string _placeholder = string.Empty;
		public string Placeholder { 
			get{ return _placeholder ?? string.Empty; }
			set { 
				if (Text == _placeholder)
					Text = value;
				_placeholder = value;
			}}

		private UIColor _placeholderFontColor;
		public UIColor PlaceholderFontColor {
			get
			{ 
				return _placeholderFontColor ?? TextColor;
			}
			set
			{ 
				FirstLoad ();
				_placeholderFontColor = value;
				if (Text == _placeholder)
					TextColor = value;
			}
		}

		public ExtendedTextView ()
		{
			Initialize ();
		}

		public ExtendedTextView (CGRect frame)
			: base(frame)
		{
			Initialize ();
		}

		public ExtendedTextView (IntPtr handle)
			: base(handle)
		{
			Initialize ();
		}

		public override void LayoutSubviews ()
		{
			base.LayoutSubviews ();
			FirstLoad ();
		}

		private void Initialize()
		{
			var insets = TextContainerInset;
			insets.Left = 15;
			insets.Right = 25;
			TextContainerInset = insets;

			ShouldBeginEditing = t => {
				SetPlaceholderIfNeeded(true);
				return true;
			};
			ShouldEndEditing = t => {
				SetPlaceholderIfNeeded(false);
				return true;
			};
		}

		private void SetPlaceholderIfNeeded(bool shouldBeginEditing = false, bool force = false)
		{

			if (shouldBeginEditing && Text == Placeholder) {
				Text = string.Empty;
				Font = NormalFont;
				TextColor = NormalTextColor;
			}
			if ((!shouldBeginEditing && string.IsNullOrEmpty (Text)) || force) {
				Text = Placeholder;
				Font = PlaceholderFont;
				TextColor = PlaceholderFontColor;
			}
		}
			

		private void FirstLoad()
		{
			if (_firstLoad) {
				_firstLoad = false;
				NormalFont = Font;
				NormalTextColor = TextColor;
			}
		}

		public void SetPlaceholder(string placeholder,  UIFont font, UIColor fontColor, bool force = false ){
			Placeholder = placeholder;
			PlaceholderFont = font;
			PlaceholderFontColor = fontColor;
			SetPlaceholderIfNeeded (force:force);
		}

	}
}
